//// PREAMBLE

#import bevy_pbr::{
    mesh_functions,
    view_transformations,
}

@group(2) @binding(0) var matcap_texture: texture_2d<f32>;
@group(2) @binding(1) var matcap_sampler: sampler;

struct Vertex {
    @builtin(instance_index) instance_index: u32,
    @location(0) position: vec3<f32>,
    @location(1) normal: vec3<f32>,
    @location(2) uv: vec2<f32>,
}

struct VertexOutput {
    @builtin(position) clip_position: vec4<f32>,
    @location(0) world_position: vec3<f32>,
    @location(1) world_normal: vec3<f32>,
    @location(2) uv: vec2<f32>,
}

@vertex
fn vertex(vertex: Vertex) -> VertexOutput {
    var out: VertexOutput;
    var world_from_local = mesh_functions::get_world_from_local(vertex.instance_index);
    out.world_position = mesh_functions::mesh_position_local_to_world(world_from_local, vec4(vertex.position, 1.0)).xyz;
    out.world_normal = mesh_functions::mesh_normal_local_to_world(vertex.normal, vertex.instance_index);
    out.clip_position = view_transformations::position_world_to_clip(out.world_position);
    out.uv = vertex.uv;
    return out;
}

@fragment
fn fragment(
    out: VertexOutput,
) -> @location(0) vec4<f32> {
    let eye_position = view_transformations::position_ndc_to_world(vec3(0.0, 0.0, -1.0));
    let world_direction = normalize(out.world_position - eye_position);

    var pos = out.world_position;
    var dist = signed_disance_function(pos);
    for (var kk=0; kk<64; kk++) {
        if (dist <= 0.0) { break; }
        if (length(pos) > sqrt(3.0)) { break; }
        pos += world_direction * dist;
        dist = signed_disance_function(pos);
    }

    if dist > 1e-3 {
        return vec4(0.0);
    }

    let hh = 1e-3;
    let world_grad = normalize(vec3(
        signed_disance_function(pos + vec3(hh, 0.0, 0.0)) - signed_disance_function(pos - vec3(hh, 0.0, 0.0)), 
        signed_disance_function(pos + vec3(0.0, hh, 0.0)) - signed_disance_function(pos - vec3(0.0, hh, 0.0)), 
        signed_disance_function(pos + vec3(0.0, 0.0, hh)) - signed_disance_function(pos - vec3(0.0, 0.0, hh)), 
    ));
    let view_grad = normalize(view_transformations::direction_world_to_view(world_grad));
    
    var color = textureSample(matcap_texture, matcap_sampler, (view_grad.xy + 1.0) / 2.0);
    
    return color;
}

fn signed_disance_function(pos: vec3<f32>) -> f32 {
    return compute_main_digraph(pos).v_dist;
}

//// BUILTINS

fn inverseSqrt(vv: f32) -> f32 { return 1.0 / sqrt(vv); }

fn opp(vv: f32) -> f32 { return -vv; }

fn vmin2(vv: vec2<f32>) -> f32 { return min(vv.x, vv.y); }
fn vmin3(vv: vec3<f32>) -> f32 { return min(min(vv.x, vv.y), vv.z); }
fn vmin4(vv: vec4<f32>) -> f32 { return min(min(vv.x, vv.y), min(vv.z, vv.w)); }

fn vmax2(vv: vec2<f32>) -> f32 { return max(vv.x, vv.y); }
fn vmax3(vv: vec3<f32>) -> f32 { return max(max(vv.x, vv.y), vv.z); }
fn vmax4(vv: vec4<f32>) -> f32 { return max(max(vv.x, vv.y), max(vv.z, vv.w)); }

// According to the Kronos documentation, the fract of the input is computing
// in this way 'x-floor(x)' which result to wrong results with negative values.
fn fractOfPositiveAndNegativeValue(vv: f32) -> f32 {
    if (vv < 0.0) {
        return vv - ceil(vv);
    } else {
        return vv - floor(vv);
    };
}
fn fractOfPositiveAndNegativeValue2(vv: vec2<f32>) -> vec2<f32> {
    return vec2(
        fractOfPositiveAndNegativeValue(vv.x),
        fractOfPositiveAndNegativeValue(vv.y));
}
fn fractOfPositiveAndNegativeValue3(vv: vec3<f32>) -> vec3<f32> {
    return vec3(
        fractOfPositiveAndNegativeValue(vv.x),
        fractOfPositiveAndNegativeValue(vv.y),
        fractOfPositiveAndNegativeValue(vv.z));
}
fn fractOfPositiveAndNegativeValue4(vv: vec4<f32>) -> vec4<f32> {
    return vec4(
        fractOfPositiveAndNegativeValue(vv.x),
        fractOfPositiveAndNegativeValue(vv.y),
        fractOfPositiveAndNegativeValue(vv.z),
        fractOfPositiveAndNegativeValue(vv.w));
}


// https://www.shadertoy.com/view/4dS3Wd
fn hash(q: f32) -> f32 {
    var p = fract(q * 0.011);
    p *= p + 7.5;
    p *= p + p;
    return fract(p);
}
fn hash2(q: vec2<f32>) -> f32 {
    var p3 = fract(q.xyx) * 0.13;
    p3 += dot(p3, p3.yzx + 3.333);
    return fract((p3.x + p3.y) * p3.z);
}
fn noise(x: f32) -> f32 {
    let i = floor(x);
    let f = fract(x);
    let u = f * f * (3.0 - 2.0 * f);
    return mix(hash(i), hash(i + 1.0), u);
}
fn noise2(x: vec2<f32>) -> f32 {
    let i = floor(x);
    let f = fract(x);
    let a = hash2(i);
    let b = hash2(i + vec2(1.0, 0.0));
    let c = hash2(i + vec2(0.0, 1.0));
    let d = hash2(i + vec2(1.0, 1.0));
    let u = f * f * (3.0 - 2.0 * f);
    return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
}
fn noise3(x: vec3<f32>) -> f32 {
    const step = vec3(110.0, 241.0, 171.0);
    let i = floor(x);
    let f = fract(x);
    let n = dot(i, step);
    let u = f * f * (3.0 - 2.0 * f);
    return mix(mix(mix(hash(n + dot(step, vec3(0.0, 0.0, 0.0))), hash(n + dot(step, vec3(1.0, 0.0, 0.0))), u.x),
                   mix(hash(n + dot(step, vec3(0.0, 1.0, 0.0))), hash(n + dot(step, vec3(1.0, 1.0, 0.0))), u.x), u.y),
               mix(mix(hash(n + dot(step, vec3(0.0, 0.0, 1.0))), hash(n + dot(step, vec3(1.0, 0.0, 1.0))), u.x),
                   mix(hash(n + dot(step, vec3(0.0, 1.0, 1.0))), hash(n + dot(step, vec3(1.0, 1.0, 1.0))), u.x), u.y), u.z);
}

fn fbm(x_: f32, octaves: f32) -> f32 {
    const shift = 100.0;
    let num_octaves = i32(octaves);
    var v = 0.0;
    var a = 0.5;
    var x = x_;
    for (var i: i32 = 0; i < num_octaves; i++) {
        v += a * noise(x);
        x = x * 2.0 + shift;
        a *= 0.5;
    }
    return v;
}
fn fbm2(x_: vec2<f32>, octaves: f32) -> f32 {
    const shift = vec2(100.0);
    const rot = mat2x2(cos(0.5), sin(0.5), -sin(0.5), cos(0.5));
    let num_octaves = i32(octaves);
    var v = 0.0;
    var a = 0.5;
    var x = x_;
    for (var i: i32 = 0; i < num_octaves; i++) {
        v += a * noise2(x);
        x = rot * x * 2.0 + shift;
        a *= 0.5;
    }
    return v;
}
fn fbm3(x_: vec3<f32>, octaves: f32) -> f32 {
    const shift = vec3(100.0);
    let num_octaves = i32(octaves);
    var v = 0.0;
    var a = 0.5;
    var x = x_;
    for (var i: i32 = 0; i < num_octaves; i++) {
        v += a * noise3(x);
        x = x * 2.0 + shift;
        a *= 0.5;
    }
    return v;
}

// https://www.pcg-random.org/
fn noisePcg(q: f32) -> f32 {
    let v = u32(round(q));
    let state = v * 747796405u + 2891336453u;
    let word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return f32(f32((word >> 22u) ^ word) * (1.0/f32(0xffffffffu))) ;
}
// http://www.jcgt.org/published/0009/03/02/
// https://www.shadertoy.com/view/XlGcRh  
fn noisePcg2(q: vec2<f32>) -> vec2<f32> {
    var v = vec2u(q);
    v = v * 1664525u + 1013904223u;
    v.x += v.y * 1664525u;
    v.y += v.x * 1664525u;
    v.x = v.x ^ (v.x >> 16u);
    v.y = v.y ^ (v.y >> 16u);
    v.x += v.y * 1664525u;
    v.y += v.x * 1664525u;
    v.x = v.x ^ (v.x >> 16u);
    v.y = v.y ^ (v.y >> 16u);
    return vec2f(v) / f32(0xffffffffu);
}
// http://www.jcgt.org/published/0009/03/02/
// https://www.shadertoy.com/view/XlGcRh
fn noisePcg3(q: vec3<f32>) -> vec3<f32> {
    var v = vec3u(q);
    v = v * 1664525u + 1013904223u;
    v.x += v.y * v.z;
    v.y += v.z * v.x;
    v.z += v.x * v.y;
    v.x = v.x ^ (v.x >> 16u);
    v.y = v.y ^ (v.y >> 16u);
    v.z = v.z ^ (v.z >> 16u);
    v.x += v.y * v.z;
    v.y += v.z * v.x;
    v.z += v.x * v.y;
    return vec3f(v) / f32(0xffffffffu);
}
// http://www.jcgt.org/published/0009/03/02/
// https://www.shadertoy.com/view/XlGcRh
fn noisePcg4(q: vec4<f32>) -> vec4<f32> {
    var v = vec4u(q);
    v = v * 1664525u + 1013904223u;
    v.x += v.y * v.w;
    v.y += v.z * v.x;
    v.z += v.x * v.y;
    v.w += v.y * v.z;
    v.x = v.x ^ (v.x >> 16u);
    v.y = v.y ^ (v.y >> 16u);
    v.z = v.z ^ (v.z >> 16u);
    v.w = v.w ^ (v.w >> 16u);
    v.x += v.y * v.w;
    v.y += v.z * v.x;
    v.z += v.x * v.y;
    v.w += v.y * v.z;
    return vec4f(v) / f32(0xffffffffu);
}


//// CUSTOM TYPES

struct t_seq_1 {
	v_start: f32,
	v_end: f32,
	v_delay: f32,
}

struct t_seq3 {
	v_duration: f32,
	v_o1: f32,
}

struct t_material {
	v_color_eyes: vec3<f32>,
	v_color_body_1: vec3<f32>,
	v_color_body_angry: vec3<f32>,
	v_roughness_eyes: f32,
	v_roughness_body: f32,
	v_color_body_sad: vec3<f32>,
}

struct t_seq2 {
	v_duration: f32,
	v_delay: f32,
}

struct t_eyes_parameters {
	v_spacing: f32,
	v_size: f32,
	v_offset: f32,
	v_open: f32,
	v_emotion: f32,
	v_offset_height: f32,
}

struct t_arms_params {
	v_start: vec3<f32>,
	v_end: vec3<f32>,
	v_radius_start: f32,
	v_radius_end: f32,
	v_smooth: f32,
	v_end_angry: vec3<f32>,
	v_end_sad: vec3<f32>,
}

struct t_anm_angry {
	v_blink: f32,
	v_closed_position: f32,
	v_freq: f32,
	v_emotion_fac: f32,
	v_emotion_eye: f32,
	v_emotion_open: f32,
	v_emotion_size: f32,
	v_emotion_offset: f32,
	v_emotion_offset_height: f32,
	v_emo_spacing: f32,
}

struct t_anm_sad {
	v_emo_fac: f32,
	v_emo_angle: f32,
	v_emo_open: f32,
	v_emo_size: f32,
	v_emo_offset: f32,
	v_emo_off_height: f32,
	v_emo_spacing: f32,
}

struct t_animation {
	v_time: f32,
	v_start: f32,
	v_end: f32,
}

struct t_consts_al {
	v_o0: f32,
	v_o1: f32,
}

struct t_pi {
	v_value: f32,
}

struct t_minus_one {
	v_value: f32,
}

struct t_ten {
	v_ten: f32,
}

struct t_half {
	v_value: f32,
}

struct t_front_leg_param {
	v_height: f32,
	v_radius: f32,
	v_pos: vec3<f32>,
	v_smoothing: f32,
	v_halfsp_dir: vec3<f32>,
	v_halfsp_off: f32,
	v_leg_rot: f32,
}

struct t_two {
	v_value: f32,
}

struct t_one {
	v_value: f32,
}

struct t_angle {
	v_o0: f32,
}

struct t_zero {
	v_value: f32,
}

struct t_body_params {
	v_belly: vec3<f32>,
	v_ass: f32,
	v_ass_smoothing: f32,
}

struct t_mouth_params {
	v_o0: vec3<f32>,
	v_o1: vec3<f32>,
	v_o2: f32,
	v_o3: f32,
}

struct t_eyes_bridge_params {
	v_bounding_box: vec3<f32>,
	v_o1: vec3<f32>,
	v_o2: f32,
	v_o3: f32,
}

struct t_eyes_params {
	v_size: f32,
	v_smoothing: f32,
	v_offset: f32,
	v_inside_ratio: f32,
	v_inside_offset: f32,
	v_inside_smooth: f32,
	v_open_close: f32,
	v_emotion: f32,
}

struct t_face_param {
	v_radii: vec3<f32>,
	v_o1: vec3<f32>,
	v_o2: f32,
}

struct t_position {
	v_pos: vec3<f32>,
}
struct t_outlet {
	v_dist: f32,
	v_basecolor: vec3<f32>,
	v_roughness: f32,
}

//// PROTOTYPES

// fn operator-(a_a: vec3<f32>, a_b: vec3<f32>) -> vec3<f32>; // FID[0122] ComposeFuncType::Arithmetic sub3:(v3 a,v3 b)->(v3 o)
// fn dot(a_a: vec3<f32>, a_b: vec3<f32>) -> f32; // FID[0034] ComposeFuncType::Builtin dot3:(v3 a,v3 b)->(sc o)
// fn operator/(a_a: f32, a_b: f32) -> f32; // FID[0006] ComposeFuncType::Arithmetic div:(sc a,sc b)->(sc o)
// fn operator*(a_a: vec3<f32>, a_b: f32) -> vec3<f32>; // FID[0118] ComposeFuncType::Arithmetic scale3:(v3 a,sc b)->(v3 o)
// fn length(a_i: vec3<f32>) -> f32; // FID[0046] ComposeFuncType::Builtin length3:(v3 i)->(sc o)
// fn operator+(a_a: vec3<f32>, a_b: vec3<f32>) -> vec3<f32>; // FID[0110] ComposeFuncType::Arithmetic add3:(v3 a,v3 b)->(v3 o)
// fn clamp(a_x: f32, a_y: f32, a_z: f32) -> f32; // FID[0027] ComposeFuncType::Builtin clamp:(sc x,sc y,sc z)->(sc o)
// fn min(a_a: f32, a_b: f32) -> f32; // FID[0056] ComposeFuncType::Builtin min:(sc a,sc b)->(sc o)
// fn operator-(a_a: f32, a_b: f32) -> f32; // FID[0120] ComposeFuncType::Arithmetic sub:(sc a,sc b)->(sc o)
// fn operator*(a_a: f32, a_b: f32) -> f32; // FID[0113] ComposeFuncType::Arithmetic mul:(sc a,sc b)->(sc o)
// fn operator+(a_a: f32, a_b: f32) -> f32; // FID[0108] ComposeFuncType::Arithmetic add:(sc a,sc b)->(sc o)
// fn pow(a_a: f32, a_b: f32) -> f32; // FID[0050] ComposeFuncType::Builtin pow:(sc a,sc b)->(sc o)
// fn abs(a_i: vec2<f32>) -> vec2<f32>; // FID[0003] ComposeFuncType::Builtin abs2:(v2 i)->(v2 o)
// fn mix(a_x: f32, a_y: f32, a_z: f32) -> f32; // FID[0021] ComposeFuncType::Builtin mix:(sc x,sc y,sc z)->(sc o)
// fn abs(a_i: f32) -> f32; // FID[0004] ComposeFuncType::Builtin abs:(sc i)->(sc o)
// fn round(a_i: f32) -> f32; // FID[0068] ComposeFuncType::Builtin round:(sc i)->(sc o)
// fn max(a_a: f32, a_b: f32) -> f32; // FID[0053] ComposeFuncType::Builtin max:(sc a,sc b)->(sc o)
// fn mix(a_x: vec3<f32>, a_y: vec3<f32>, a_z: vec3<f32>) -> vec3<f32>; // FID[0060] ComposeFuncType::Builtin mix3:(v3 x,v3 y,v3 z)->(v3 o)
// fn noisePcg(a_i: f32) -> f32; // FID[0359] ComposeFuncType::Builtin noisePcg:(sc i)->(sc o)
// fn ceil(a_i: f32) -> f32; // FID[0007] ComposeFuncType::Builtin ceil:(sc i)->(sc o)
// fn opp(a_i: f32) -> f32; // FID[0018] ComposeFuncType::Builtin opp:(sc i)->(sc o)
// fn operator*(a_a: vec3<f32>, a_b: vec3<f32>) -> vec3<f32>; // FID[0106] ComposeFuncType::Arithmetic mul3:(v3 a,v3 b)->(v3 o)
// fn sin(a_i: f32) -> f32; // FID[0078] ComposeFuncType::Builtin sin:(sc i)->(sc o)
// fn cos(a_i: f32) -> f32; // FID[0032] ComposeFuncType::Builtin cos:(sc i)->(sc o)
// fn max(a_a: vec2<f32>, a_b: vec2<f32>) -> vec2<f32>; // FID[0048] ComposeFuncType::Builtin max2:(v2 a,v2 b)->(v2 o)
// fn operator*(a_a: mat3x3<f32>, a_b: vec3<f32>) -> vec3<f32>; // FID[0112] ComposeFuncType::Arithmetic apply3:(m3 a,v3 b)->(v3 o)
// fn length(a_i: vec2<f32>) -> f32; // FID[0045] ComposeFuncType::Builtin length2:(v2 i)->(sc o)
// fn vmax2(a_i: vec2<f32>) -> f32; // FID[0072] ComposeFuncType::Builtin vmax2:(v2 i)->(sc o)
// fn operator-(a_a: vec2<f32>, a_b: vec2<f32>) -> vec2<f32>; // FID[0121] ComposeFuncType::Arithmetic sub2:(v2 a,v2 b)->(v2 o)
// fn operator/(a_a: vec3<f32>, a_b: vec3<f32>) -> vec3<f32>; // FID[0022] ComposeFuncType::Arithmetic div3:(v3 a,v3 b)->(v3 o)
// fn compute_main_digraph(a_pos: vec3<f32>) -> t_outlet; // MAIN FID[0311] ComposeFuncType::Terminal main:(v3 pos)->(sc dist,v3 basecolor,sc roughness)

//// INSTANCES

const u_seq_1: t_seq_1 = t_seq_1(f32(1.5), f32(2.8), f32(1.5));
const u_seq3: t_seq3 = t_seq3(f32(1), f32(0.5));
const u_material: t_material = t_material(vec3(0.074, 0.13, 0.179), vec3(1, 0.519, 0.804), vec3(0.926, 0.241, 0.054), f32(0.265), f32(0.43), vec3(0.426, 0.648, 0.839));
const u_seq2: t_seq2 = t_seq2(f32(1), f32(1.5));
const u_eyes_parameters: t_eyes_parameters = t_eyes_parameters(f32(0.568), f32(0.172), f32(0), f32(1), f32(-6.3), f32(0.056));
const u_arms_params: t_arms_params = t_arms_params(vec3(0.222, 0.111, 0.071), vec3(0.333, 0.185, 0.25), f32(0.055), f32(0.06), f32(0.085), vec3(0.259, 0, 0.179), vec3(0.222, 0.148, 0.214));
const u_anm_angry: t_anm_angry = t_anm_angry(f32(10), f32(0.055), f32(0.805), f32(0), f32(25.2), f32(0.265), f32(0.24), f32(0.2), f32(-0.045), f32(0.5));
const u_anm_sad: t_anm_sad = t_anm_sad(f32(0), f32(-40.05), f32(0.475), f32(0.135), f32(0), f32(-0.09), f32(0.365));
const u_animation: t_animation = t_animation(f32(5.6241236), f32(0), f32(10));

const c_consts_al: t_consts_al = t_consts_al(f32(0.1), f32(0.5));
const c_pi: t_pi = t_pi(f32(3.1415927));
const c_minus_one: t_minus_one = t_minus_one(f32(-1));
const c_ten: t_ten = t_ten(f32(10));
const c_half: t_half = t_half(f32(0.5));
const c_front_leg_param: t_front_leg_param = t_front_leg_param(f32(0.13), f32(0.11), vec3(0.111, -0.185, 0), f32(0.13), vec3(0, 1, 0), f32(0.5), f32(18.9));
const c_two: t_two = t_two(f32(2));
const c_one: t_one = t_one(f32(1));
const c_angle: t_angle = t_angle(f32(180));
const c_zero: t_zero = t_zero(f32(0));
const c_body_params: t_body_params = t_body_params(vec3(0.259, 0.241, 0.286), f32(0.065), f32(0.055));
const c_mouth_params: t_mouth_params = t_mouth_params(vec3(0.193, 0.047, 0.169), vec3(0, 0.333, 0.25), f32(0.385), f32(0.08));
const c_eyes_bridge_params: t_eyes_bridge_params = t_eyes_bridge_params(vec3(0.148, 0, 0.107), vec3(0, 0.444, 0), f32(0.525), f32(0.005));
const c_eyes_params: t_eyes_params = t_eyes_params(f32(0.115), f32(0.045), f32(0.06), f32(0.885), f32(0.095), f32(0.03), f32(0.315), f32(-29.7));
const c_face_param: t_face_param = t_face_param(vec3(0.185, 0.111, 0.107), vec3(0, 0.407, 0.25), f32(0.2));

//// IMPLEMENTATIONS

// FID[0311] ComposeFuncType::Terminal main:(v3 pos)->(sc dist,v3 basecolor,sc roughness)
// FID[0124] ComposeFuncType::Inlet position:()->(v3 pos)
// FID[0125] ComposeFuncType::Outlet outlet:(sc dist,v3 basecolor,sc roughness)->()
fn compute_main_digraph(a_pos: vec3<f32>) -> t_outlet {
	let tmp394: f32 = abs((((((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value).x);
	let tmp393: vec3<f32> = (((((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value);
	let tmp359: f32 = dot((((((((((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) - c_eyes_bridge_params.v_o1) - vec3<f32>(mix(mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), c_zero.v_value, c_consts_al.v_o0)), ((vec3<f32>(mix(mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), c_zero.v_value, c_consts_al.v_o0) * vec3<f32>(c_minus_one.v_value, c_one.v_value, c_one.v_value)) - vec3<f32>(mix(mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), c_zero.v_value, c_consts_al.v_o0)));
	let tmp361: f32 = dot(((vec3<f32>(mix(mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), c_zero.v_value, c_consts_al.v_o0) * vec3<f32>(c_minus_one.v_value, c_one.v_value, c_one.v_value)) - vec3<f32>(mix(mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), c_zero.v_value, c_consts_al.v_o0)), ((vec3<f32>(mix(mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), c_zero.v_value, c_consts_al.v_o0) * vec3<f32>(c_minus_one.v_value, c_one.v_value, c_one.v_value)) - vec3<f32>(mix(mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), c_zero.v_value, c_consts_al.v_o0)));
	let tmp395: vec3<f32> = vec3<f32>(tmp394, tmp393.y, tmp393.z);
	let tmp570: t_one = c_one;
	let tmp380: f32 = ((((length(((((((((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) / c_body_params.v_belly)) - c_one.v_value) * length(((((((((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) / c_body_params.v_belly))) / length(((((((((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) / (c_body_params.v_belly * c_body_params.v_belly)))) - ((length(((((((((((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) - c_eyes_bridge_params.v_o1) - vec3<f32>(mix(mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), c_zero.v_value, c_consts_al.v_o0)) - (((vec3<f32>(mix(mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), c_zero.v_value, c_consts_al.v_o0) * vec3<f32>(c_minus_one.v_value, tmp570.v_value, tmp570.v_value)) - vec3<f32>(mix(mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), c_zero.v_value, c_consts_al.v_o0)) * clamp((tmp359 / tmp361), c_zero.v_value, c_one.v_value)))) - c_eyes_bridge_params.v_o3) + c_zero.v_value));
	let tmp364: t_zero = c_zero;
	let tmp363: t_one = c_one;
	let tmp360: f32 = (tmp359 / tmp361);
	let tmp569: t_minus_one = c_minus_one;
	let tmp392: f32 = abs(tmp380);
	let tmp069: f32 = dot(((((((((((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) - c_eyes_bridge_params.v_o1) - vec3<f32>(mix(mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), c_zero.v_value, c_consts_al.v_o0)), ((vec3<f32>(mix(mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), c_zero.v_value, c_consts_al.v_o0) * vec3<f32>(tmp569.v_value, tmp570.v_value, tmp570.v_value)) - vec3<f32>(mix(mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), c_zero.v_value, c_consts_al.v_o0)));
	let tmp372: vec3<f32> = (tmp395 - c_front_leg_param.v_pos);
	let tmp071: f32 = dot(((vec3<f32>(mix(mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), c_zero.v_value, c_consts_al.v_o0) * vec3<f32>(tmp569.v_value, tmp570.v_value, tmp570.v_value)) - vec3<f32>(mix(mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), c_zero.v_value, c_consts_al.v_o0)), ((vec3<f32>(mix(mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), c_zero.v_value, c_consts_al.v_o0) * vec3<f32>(tmp569.v_value, tmp570.v_value, tmp570.v_value)) - vec3<f32>(mix(mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), c_zero.v_value, c_consts_al.v_o0)));
	let tmp104: f32 = abs(((((((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value).x);
	let tmp568: vec3<f32> = vec3<f32>(tmp569.v_value, tmp570.v_value, tmp570.v_value);
	let tmp369: vec3<f32> = ((((((((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) - c_eyes_bridge_params.v_o1);
	let tmp344: vec2<f32> = vec2<f32>(tmp372.x, tmp372.z);
	let tmp103: vec3<f32> = ((((((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value);
	let tmp358: vec3<f32> = ((vec3<f32>(mix(mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), c_zero.v_value, c_consts_al.v_o0) * tmp568) - vec3<f32>(mix(mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), c_zero.v_value, c_consts_al.v_o0));
	let tmp447: t_one = c_one;
	let tmp362: f32 = clamp(tmp360, tmp364.v_value, tmp363.v_value);
	let tmp567: vec3<f32> = (vec3<f32>(mix(mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), c_zero.v_value, c_consts_al.v_o0) * tmp568);
	let tmp070: f32 = (tmp069 / tmp071);
	let tmp105: vec3<f32> = vec3<f32>(tmp104, tmp103.y, tmp103.z);
	let tmp073: t_one = c_one;
	let tmp383: t_zero = c_zero;
	let tmp090: f32 = ((((length((((((((((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) / c_body_params.v_belly)) - c_one.v_value) * length((((((((((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) / c_body_params.v_belly))) / length((((((((((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) / (c_body_params.v_belly * c_body_params.v_belly)))) - ((length((((((((((((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) - c_eyes_bridge_params.v_o1) - vec3<f32>(mix(mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), c_zero.v_value, c_consts_al.v_o0)) - ((tmp567 - vec3<f32>(mix(mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), c_zero.v_value, c_consts_al.v_o0)) * clamp(tmp070, c_zero.v_value, tmp073.v_value)))) - c_eyes_bridge_params.v_o3) + c_zero.v_value));
	let tmp378: t_one = c_one;
	let tmp365: vec3<f32> = (tmp358 * tmp362);
	let tmp357: vec3<f32> = (tmp369 - vec3<f32>(mix(mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), c_zero.v_value, c_consts_al.v_o0));
	let tmp074: t_zero = c_zero;
	let tmp400: f32 = ((min((((length(((((((((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * tmp447.v_value) * c_one.v_value) * tmp378.v_value) / c_body_params.v_belly)) - c_one.v_value) * length(((((((((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * tmp447.v_value) * c_one.v_value) * tmp378.v_value) / c_body_params.v_belly))) / length(((((((((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * tmp447.v_value) * c_one.v_value) * tmp378.v_value) / (c_body_params.v_belly * c_body_params.v_belly)))), ((length((tmp357 - tmp365)) - c_eyes_bridge_params.v_o3) + c_zero.v_value)) - ((((max((c_eyes_bridge_params.v_o2 - tmp392), tmp383.v_value) / c_eyes_bridge_params.v_o2) * (max((c_eyes_bridge_params.v_o2 - tmp392), tmp383.v_value) / c_eyes_bridge_params.v_o2)) * c_eyes_bridge_params.v_o2) * (c_half.v_value * c_half.v_value))) - ((((length(((((((((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * tmp447.v_value) * c_one.v_value) - c_face_param.v_o1) / c_face_param.v_radii)) - c_one.v_value) * length(((((((((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * tmp447.v_value) * c_one.v_value) - c_face_param.v_o1) / c_face_param.v_radii))) / length(((((((((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * tmp447.v_value) * c_one.v_value) - c_face_param.v_o1) / (c_face_param.v_radii * c_face_param.v_radii)))) + c_zero.v_value));
	let tmp448: vec3<f32> = (((((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * tmp447.v_value);
	let tmp345: f32 = length(tmp344);
	let tmp381: f32 = (c_eyes_bridge_params.v_o2 - tmp392);
	let tmp343: vec3<f32> = tmp372;
	let tmp398: t_one = c_one;
	let tmp072: f32 = clamp(tmp070, tmp074.v_value, tmp073.v_value);
	let tmp082: vec3<f32> = (tmp105 - c_front_leg_param.v_pos);
	let tmp412: f32 = abs(tmp400);
	let tmp102: f32 = abs(tmp090);
	let tmp366: vec3<f32> = (tmp357 - tmp365);
	let tmp617: t_half = c_half;
	let tmp157: t_one = c_one;
	let tmp325: vec3<f32> = (((tmp448 * tmp398.v_value) * tmp378.v_value) / c_body_params.v_belly);
	let tmp382: f32 = max(tmp381, tmp383.v_value);
	let tmp399: vec3<f32> = (tmp448 * tmp398.v_value);
	let tmp079: vec3<f32> = (((((((((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * tmp157.v_value) * c_one.v_value) * c_one.v_value) - c_eyes_bridge_params.v_o1);
	let tmp068: vec3<f32> = (tmp567 - vec3<f32>(mix(mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), c_zero.v_value, c_consts_al.v_o0));
	let tmp610: f32 = (u_animation.v_time * u_anm_angry.v_blink);
	let tmp347: vec2<f32> = vec2<f32>(tmp345, tmp343.y);
	let tmp379: vec3<f32> = (tmp399 * tmp378.v_value);
	let tmp327: vec3<f32> = (c_body_params.v_belly * c_body_params.v_belly);
	let tmp331: t_one = c_one;
	let tmp054: vec2<f32> = vec2<f32>(tmp082.x, tmp082.z);
	let tmp578: t_pi = c_pi;
	let tmp348: vec2<f32> = abs(tmp347);
	let tmp431: f32 = (sin(((tmp578.v_value / c_angle.v_o0) * mix(mix(u_eyes_parameters.v_emotion, u_anm_angry.v_emotion_eye, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_angle, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)))) * sin(c_zero.v_value));
	let tmp346: vec2<f32> = vec2<f32>(c_front_leg_param.v_radius, c_front_leg_param.v_height);
	let tmp158: vec3<f32> = ((((((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * tmp157.v_value);
	let tmp340: t_one = c_one;
	let tmp336: vec3<f32> = (c_face_param.v_radii * c_face_param.v_radii);
	let tmp435: f32 = (sin(((tmp578.v_value / c_angle.v_o0) * mix(mix(u_eyes_parameters.v_emotion, u_anm_angry.v_emotion_eye, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_angle, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)))) * sin(c_zero.v_value));
	let tmp426: f32 = (cos(((tmp578.v_value / c_angle.v_o0) * mix(mix(u_eyes_parameters.v_emotion, u_anm_angry.v_emotion_eye, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_angle, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)))) * sin(c_zero.v_value));
	let tmp110: f32 = ((min((((length((((tmp158 * c_one.v_value) * c_one.v_value) / c_body_params.v_belly)) - c_one.v_value) * length((((tmp158 * c_one.v_value) * c_one.v_value) / c_body_params.v_belly))) / length((((tmp158 * c_one.v_value) * c_one.v_value) / (c_body_params.v_belly * c_body_params.v_belly)))), ((length(((tmp079 - vec3<f32>(mix(mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), c_zero.v_value, c_consts_al.v_o0)) - (tmp068 * tmp072))) - c_eyes_bridge_params.v_o3) + c_zero.v_value)) - ((((max((c_eyes_bridge_params.v_o2 - tmp102), c_zero.v_value) / c_eyes_bridge_params.v_o2) * (max((c_eyes_bridge_params.v_o2 - tmp102), c_zero.v_value) / c_eyes_bridge_params.v_o2)) * c_eyes_bridge_params.v_o2) * (c_half.v_value * c_half.v_value))) - ((((length((((tmp158 * c_one.v_value) - c_face_param.v_o1) / c_face_param.v_radii)) - c_one.v_value) * length((((tmp158 * c_one.v_value) - c_face_param.v_o1) / c_face_param.v_radii))) / length((((tmp158 * c_one.v_value) - c_face_param.v_o1) / (c_face_param.v_radii * c_face_param.v_radii)))) + c_zero.v_value));
	let tmp449: f32 = ((min((min((((length(tmp325) - tmp331.v_value) * length(tmp325)) / length((tmp379 / tmp327))), ((length(tmp366) - c_eyes_bridge_params.v_o3) + c_zero.v_value)) - ((((tmp382 / c_eyes_bridge_params.v_o2) * (tmp382 / c_eyes_bridge_params.v_o2)) * c_eyes_bridge_params.v_o2) * (c_half.v_value * c_half.v_value))), ((((length(((tmp399 - c_face_param.v_o1) / c_face_param.v_radii)) - tmp340.v_value) * length(((tmp399 - c_face_param.v_o1) / c_face_param.v_radii))) / length(((tmp399 - c_face_param.v_o1) / tmp336))) + c_zero.v_value)) - ((((max((c_face_param.v_o2 - tmp412), c_zero.v_value) / c_face_param.v_o2) * (max((c_face_param.v_o2 - tmp412), c_zero.v_value) / c_face_param.v_o2)) * c_face_param.v_o2) * (c_half.v_value * c_half.v_value))) - (((min(vmax2((tmp348 - tmp346)), c_zero.v_value) + length(max((tmp348 - tmp346), vec2<f32>(c_zero.v_value, c_zero.v_value)))) + c_zero.v_value) * c_one.v_value));
	let tmp579: t_angle = c_angle;
	let tmp108: t_one = c_one;
	let tmp093: t_zero = c_zero;
	let tmp334: vec3<f32> = ((tmp399 - c_face_param.v_o1) / c_face_param.v_radii);
	let tmp091: f32 = (c_eyes_bridge_params.v_o2 - tmp102);
	let tmp075: vec3<f32> = (tmp068 * tmp072);
	let tmp055: f32 = length(tmp054);
	let tmp053: vec3<f32> = tmp082;
	let tmp088: t_one = c_one;
	let tmp330: f32 = (length(tmp325) - tmp331.v_value);
	let tmp067: vec3<f32> = (tmp079 - vec3<f32>(mix(mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), c_zero.v_value, c_consts_al.v_o0));
	let tmp403: t_zero = c_zero;
	let tmp328: vec3<f32> = (tmp379 / tmp327);
	let tmp608: f32 = noisePcg(tmp610);
	let tmp375: vec3<f32> = (tmp399 - c_face_param.v_o1);
	let tmp422: f32 = (cos(((tmp578.v_value / tmp579.v_o0) * mix(mix(u_eyes_parameters.v_emotion, u_anm_angry.v_emotion_eye, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_angle, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)))) * sin(c_zero.v_value));
	let tmp401: f32 = (c_face_param.v_o2 - tmp412);
	let tmp384: f32 = (tmp382 / c_eyes_bridge_params.v_o2);
	let tmp326: f32 = length(tmp325);
	let tmp367: f32 = length(tmp366);
	let tmp615: f32 = (u_anm_angry.v_freq * tmp617.v_value);
	let tmp621: f32 = mix(u_eyes_parameters.v_emotion, u_anm_angry.v_emotion_eye, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value));
	let tmp429: f32 = (sin(((tmp578.v_value / tmp579.v_o0) * mix(tmp621, u_anm_sad.v_emo_angle, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)))) * sin(c_zero.v_value));
	let tmp425: f32 = (sin(((tmp578.v_value / tmp579.v_o0) * mix(tmp621, u_anm_sad.v_emo_angle, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)))) * cos(c_zero.v_value));
	let tmp432: f32 = (tmp431 * sin(c_zero.v_value));
	let tmp484: f32 = abs((vec3<f32>(abs((t_position(a_pos).v_pos * c_one.v_value).x), (t_position(a_pos).v_pos * c_one.v_value).y, (t_position(a_pos).v_pos * c_one.v_value).z) * c_one.v_value).x);
	let tmp122: f32 = abs(tmp110);
	let tmp434: f32 = (cos(((tmp578.v_value / tmp579.v_o0) * mix(tmp621, u_anm_sad.v_emo_angle, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)))) * cos(c_zero.v_value));
	let tmp335: f32 = length(tmp334);
	let tmp423: f32 = (tmp422 * sin(c_zero.v_value));
	let tmp436: f32 = (tmp435 * cos(c_zero.v_value));
	let tmp427: f32 = (tmp426 * cos(c_zero.v_value));
	let tmp438: f32 = (cos(((tmp578.v_value / tmp579.v_o0) * mix(tmp621, u_anm_sad.v_emo_angle, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)))) * sin(c_zero.v_value));
	let tmp339: f32 = (tmp335 - tmp340.v_value);
	let tmp402: f32 = max(tmp401, tmp403.v_value);
	let tmp628: f32 = mix(tmp621, u_anm_sad.v_emo_angle, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value));
	let tmp337: vec3<f32> = (tmp375 / tmp336);
	let tmp416: f32 = cos(((tmp578.v_value / tmp579.v_o0) * tmp628));
	let tmp349: vec2<f32> = (tmp348 - tmp346);
	let tmp415: f32 = sin(((tmp578.v_value / tmp579.v_o0) * tmp628));
	let tmp418: f32 = sin(c_zero.v_value);
	let tmp419: f32 = cos(c_zero.v_value);
	let tmp037: vec3<f32> = (c_body_params.v_belly * c_body_params.v_belly);
	let tmp354: vec2<f32> = vec2<f32>(c_zero.v_value, c_zero.v_value);
	let tmp041: t_one = c_one;
	let tmp057: vec2<f32> = vec2<f32>(tmp055, tmp053.y);
	let tmp076: vec3<f32> = (tmp067 - tmp075);
	let tmp109: vec3<f32> = (tmp158 * tmp108.v_value);
	let tmp420: f32 = sin(c_zero.v_value);
	let tmp622: f32 = mix(u_eyes_parameters.v_open, u_anm_angry.v_emotion_open, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value));
	let tmp417: f32 = cos(c_zero.v_value);
	let tmp089: vec3<f32> = (tmp109 * tmp088.v_value);
	let tmp616: f32 = (tmp608 + tmp615);
	let tmp035: vec3<f32> = (tmp089 / c_body_params.v_belly);
	let tmp368: f32 = (tmp367 - c_eyes_bridge_params.v_o3);
	let tmp092: f32 = max(tmp091, tmp093.v_value);
	let tmp371: t_zero = c_zero;
	let tmp388: t_half = c_half;
	let tmp461: f32 = abs(tmp449);
	let tmp483: vec3<f32> = (vec3<f32>(abs((t_position(a_pos).v_pos * c_one.v_value).x), (t_position(a_pos).v_pos * c_one.v_value).y, (t_position(a_pos).v_pos * c_one.v_value).z) * c_one.v_value);
	let tmp386: f32 = (tmp384 * tmp384);
	let tmp332: f32 = (tmp330 * tmp326);
	let tmp329: f32 = length(tmp328);
	let tmp580: f32 = (tmp578.v_value / tmp579.v_o0);
	let tmp430: f32 = (tmp415 * tmp417);
	let tmp433: f32 = (tmp432 + tmp434);
	let tmp588: t_zero = c_zero;
	let tmp437: f32 = (tmp436 - tmp438);
	let tmp439: f32 = opp(tmp418);
	let tmp132: f32 = (cos((tmp580 * tmp628)) * sin(tmp588.v_value));
	let tmp040: f32 = (length(tmp035) - tmp041.v_value);
	let tmp038: vec3<f32> = (tmp089 / tmp037);
	let tmp440: f32 = (tmp417 * tmp420);
	let tmp136: f32 = (cos((tmp580 * tmp628)) * sin(tmp588.v_value));
	let tmp441: f32 = (tmp417 * tmp419);
	let tmp581: f32 = (tmp580 * tmp628);
	let tmp141: f32 = (sin(tmp581) * sin(tmp588.v_value));
	let tmp351: t_zero = c_zero;
	let tmp450: f32 = (c_front_leg_param.v_smoothing - tmp461);
	let tmp485: vec3<f32> = vec3<f32>(tmp484, tmp483.y, tmp483.z);
	let tmp159: f32 = ((min((min(((tmp040 * length(tmp035)) / length(tmp038)), ((length(tmp076) - c_eyes_bridge_params.v_o3) + c_zero.v_value)) - ((((tmp092 / c_eyes_bridge_params.v_o2) * (tmp092 / c_eyes_bridge_params.v_o2)) * c_eyes_bridge_params.v_o2) * (c_half.v_value * c_half.v_value))), ((((length(((tmp109 - c_face_param.v_o1) / c_face_param.v_radii)) - c_one.v_value) * length(((tmp109 - c_face_param.v_o1) / c_face_param.v_radii))) / length(((tmp109 - c_face_param.v_o1) / (c_face_param.v_radii * c_face_param.v_radii)))) + c_zero.v_value)) - ((((max((c_face_param.v_o2 - tmp122), c_zero.v_value) / c_face_param.v_o2) * (max((c_face_param.v_o2 - tmp122), c_zero.v_value) / c_face_param.v_o2)) * c_face_param.v_o2) * (c_half.v_value * c_half.v_value))) - (((min(vmax2((abs(tmp057) - vec2<f32>(c_front_leg_param.v_radius, c_front_leg_param.v_height))), c_zero.v_value) + length(max((abs(tmp057) - vec2<f32>(c_front_leg_param.v_radius, c_front_leg_param.v_height)), vec2<f32>(c_zero.v_value, c_zero.v_value)))) + c_zero.v_value) * c_one.v_value));
	let tmp387: f32 = (tmp386 * c_eyes_bridge_params.v_o2);
	let tmp389: f32 = (tmp388.v_value * tmp388.v_value);
	let tmp468: t_one = c_one;
	let tmp470: f32 = ((min((min((min((tmp332 / tmp329), (tmp368 + tmp371.v_value)) - (tmp387 * tmp389)), (((tmp339 * tmp335) / length(tmp337)) + c_zero.v_value)) - ((((tmp402 / c_face_param.v_o2) * (tmp402 / c_face_param.v_o2)) * c_face_param.v_o2) * (c_half.v_value * c_half.v_value))), (((min(vmax2(tmp349), tmp351.v_value) + length(max(tmp349, tmp354))) + c_zero.v_value) * c_one.v_value)) - ((((max(tmp450, c_zero.v_value) / c_front_leg_param.v_smoothing) * (max(tmp450, c_zero.v_value) / c_front_leg_param.v_smoothing)) * c_front_leg_param.v_smoothing) * (c_half.v_value * c_half.v_value))) - ((((length(((((((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value) * c_one.v_value) * tmp468.v_value) - c_mouth_params.v_o1) / c_mouth_params.v_o0)) - c_one.v_value) * length(((((((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value) * c_one.v_value) * tmp468.v_value) - c_mouth_params.v_o1) / c_mouth_params.v_o0))) / length(((((((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value) * c_one.v_value) * tmp468.v_value) - c_mouth_params.v_o1) / (c_mouth_params.v_o0 * c_mouth_params.v_o0)))) + c_zero.v_value));
	let tmp353: vec2<f32> = max(tmp349, tmp354);
	let tmp333: f32 = (tmp332 / tmp329);
	let tmp585: t_zero = c_zero;
	let tmp350: f32 = vmax2(tmp349);
	let tmp094: f32 = (tmp092 / c_eyes_bridge_params.v_o2);
	let tmp341: f32 = (tmp339 * tmp335);
	let tmp338: f32 = length(tmp337);
	let tmp631: f32 = mix(tmp622, u_anm_sad.v_emo_open, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value));
	let tmp036: f32 = length(tmp035);
	let tmp609: f32 = round(tmp616);
	let tmp085: vec3<f32> = (tmp109 - c_face_param.v_o1);
	let tmp428: f32 = (tmp427 + tmp429);
	let tmp424: f32 = (tmp423 - tmp425);
	let tmp113: t_zero = c_zero;
	let tmp111: f32 = (c_face_param.v_o2 - tmp122);
	let tmp370: f32 = (tmp368 + tmp371.v_value);
	let tmp452: t_zero = c_zero;
	let tmp404: f32 = (tmp402 / c_face_param.v_o2);
	let tmp077: f32 = length(tmp076);
	let tmp611: t_anm_angry = u_anm_angry;
	let tmp145: f32 = (sin(tmp581) * sin(tmp588.v_value));
	let tmp421: f32 = (tmp416 * tmp417);
	let tmp058: vec2<f32> = abs(tmp057);
	let tmp056: vec2<f32> = vec2<f32>(c_front_leg_param.v_radius, c_front_leg_param.v_height);
	let tmp050: t_one = c_one;
	let tmp046: vec3<f32> = (c_face_param.v_radii * c_face_param.v_radii);
	let tmp044: vec3<f32> = (tmp085 / c_face_param.v_radii);
	let tmp133: f32 = (tmp132 * sin(tmp588.v_value));
	let tmp125: f32 = sin(tmp581);
	let tmp462: vec3<f32> = (tmp485 - (((vec3<f32>(mix(mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), c_zero.v_value, c_consts_al.v_o0) + vec3<f32>(c_zero.v_value, mix(mix(u_eyes_parameters.v_offset_height, u_anm_angry.v_emotion_offset_height, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_off_height, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), mix(mix(u_eyes_parameters.v_offset, u_anm_angry.v_emotion_offset, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_offset, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)))) + c_eyes_bridge_params.v_o1) + vec3<f32>(tmp585.v_value, tmp585.v_value, c_eyes_params.v_inside_offset)));
	let tmp112: f32 = max(tmp111, tmp113.v_value);
	let tmp171: f32 = abs(tmp159);
	let tmp548: t_one = c_one;
	let tmp144: f32 = (cos(tmp581) * cos(tmp588.v_value));
	let tmp148: f32 = (cos(tmp581) * sin(tmp588.v_value));
	let tmp352: f32 = min(tmp350, tmp351.v_value);
	let tmp045: f32 = length(tmp044);
	let tmp142: f32 = (tmp141 * sin(tmp588.v_value));
	let tmp127: f32 = cos(tmp588.v_value);
	let tmp059: vec2<f32> = (tmp058 - tmp056);
	let tmp139: f32 = (tmp125 * sin(tmp588.v_value));
	let tmp413: mat3x3<f32> = mat3x3<f32>(tmp421, tmp424, tmp428, tmp430, tmp433, tmp437, tmp439, tmp440, tmp441);
	let tmp081: t_zero = c_zero;
	let tmp126: f32 = cos(tmp581);
	let tmp078: f32 = (tmp077 - c_eyes_bridge_params.v_o3);
	let tmp408: t_half = c_half;
	let tmp129: f32 = cos(tmp588.v_value);
	let tmp096: f32 = (tmp094 * tmp094);
	let tmp451: f32 = max(tmp450, tmp452.v_value);
	let tmp098: t_half = c_half;
	let tmp146: f32 = (tmp145 * tmp129);
	let tmp342: f32 = (tmp341 / tmp338);
	let tmp193: vec3<f32> = (vec3<f32>(abs(((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value).x), ((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value).y, ((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value).z) * c_one.v_value);
	let tmp356: f32 = length(tmp353);
	let tmp064: vec2<f32> = vec2<f32>(c_zero.v_value, c_zero.v_value);
	let tmp406: f32 = (tmp404 * tmp404);
	let tmp137: f32 = (tmp136 * tmp129);
	let tmp584: vec3<f32> = vec3<f32>(tmp585.v_value, tmp585.v_value, c_eyes_params.v_inside_offset);
	let tmp469: vec3<f32> = ((((t_position(a_pos).v_pos * tmp548.v_value) * c_one.v_value) * c_one.v_value) * tmp468.v_value);
	let tmp128: f32 = sin(tmp588.v_value);
	let tmp390: f32 = (tmp387 * tmp389);
	let tmp049: f32 = (tmp045 - tmp050.v_value);
	let tmp047: vec3<f32> = (tmp085 / tmp046);
	let tmp482: f32 = abs(tmp470);
	let tmp613: f32 = mix(tmp611.v_closed_position, tmp631, tmp609);
	let tmp042: f32 = (tmp040 * tmp036);
	let tmp130: f32 = sin(tmp588.v_value);
	let tmp194: f32 = abs(tmp193.x);
	let tmp039: f32 = length(tmp038);
	let tmp377: t_zero = c_zero;
	let tmp135: f32 = (tmp125 * tmp129);
	let tmp385: f32 = min(tmp333, tmp370);
	let tmp061: t_zero = c_zero;
	let tmp147: f32 = (tmp146 - tmp148);
	let tmp409: f32 = (tmp408.v_value * tmp408.v_value);
	let tmp149: f32 = opp(tmp128);
	let tmp150: f32 = (tmp127 * tmp130);
	let tmp407: f32 = (tmp406 * c_face_param.v_o2);
	let tmp151: f32 = (tmp127 * tmp129);
	let tmp099: f32 = (tmp098.v_value * tmp098.v_value);
	let tmp097: f32 = (tmp096 * c_eyes_bridge_params.v_o2);
	let tmp583: vec3<f32> = (((vec3<f32>(mix(mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), c_zero.v_value, c_consts_al.v_o0) + vec3<f32>(c_zero.v_value, mix(mix(u_eyes_parameters.v_offset_height, u_anm_angry.v_emotion_offset_height, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_off_height, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), mix(mix(u_eyes_parameters.v_offset, u_anm_angry.v_emotion_offset, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_offset, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)))) + c_eyes_bridge_params.v_o1) + tmp584);
	let tmp453: f32 = (tmp451 / c_front_leg_param.v_smoothing);
	let tmp160: f32 = (c_front_leg_param.v_smoothing - tmp171);
	let tmp414: vec3<f32> = (tmp413 * tmp462);
	let tmp391: f32 = (tmp385 - tmp390);
	let tmp162: t_zero = c_zero;
	let tmp376: f32 = (tmp342 + tmp377.v_value);
	let tmp178: t_one = c_one;
	let tmp180: f32 = ((min((min((min((tmp042 / tmp039), (tmp078 + tmp081.v_value)) - (tmp097 * tmp099)), (((tmp049 * tmp045) / length(tmp047)) + c_zero.v_value)) - ((((tmp112 / c_face_param.v_o2) * (tmp112 / c_face_param.v_o2)) * c_face_param.v_o2) * (c_half.v_value * c_half.v_value))), (((min(vmax2(tmp059), tmp061.v_value) + length(max(tmp059, tmp064))) + c_zero.v_value) * c_one.v_value)) - ((((max(tmp160, tmp162.v_value) / c_front_leg_param.v_smoothing) * (max(tmp160, tmp162.v_value) / c_front_leg_param.v_smoothing)) * c_front_leg_param.v_smoothing) * (c_half.v_value * c_half.v_value))) - ((((length((((((((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * tmp178.v_value) - c_mouth_params.v_o1) / c_mouth_params.v_o0)) - c_one.v_value) * length((((((((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * tmp178.v_value) - c_mouth_params.v_o1) / c_mouth_params.v_o0))) / length((((((((t_position(a_pos).v_pos * c_one.v_value) * c_one.v_value) * c_one.v_value) * c_one.v_value) * tmp178.v_value) - c_mouth_params.v_o1) / (c_mouth_params.v_o0 * c_mouth_params.v_o0)))) + c_zero.v_value));
	let tmp195: vec3<f32> = vec3<f32>(tmp194, tmp193.y, tmp193.z);
	let tmp444: vec3<f32> = (tmp469 - c_mouth_params.v_o1);
	let tmp549: vec3<f32> = (t_position(a_pos).v_pos * tmp548.v_value);
	let tmp309: vec3<f32> = (c_mouth_params.v_o0 * c_mouth_params.v_o0);
	let tmp114: f32 = (tmp112 / c_face_param.v_o2);
	let tmp080: f32 = (tmp078 + tmp081.v_value);
	let tmp043: f32 = (tmp042 / tmp039);
	let tmp313: t_one = c_one;
	let tmp316: vec3<f32> = (tmp414 / vec3<f32>((mix(mix(u_eyes_parameters.v_size, u_anm_angry.v_emotion_size, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_size, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)) * c_eyes_params.v_inside_ratio), (mix(mix(u_eyes_parameters.v_size, u_anm_angry.v_emotion_size, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_size, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)) * tmp613), (mix(mix(u_eyes_parameters.v_size, u_anm_angry.v_emotion_size, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_size, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)) * c_eyes_params.v_inside_ratio)));
	let tmp063: vec2<f32> = max(tmp059, tmp064);
	let tmp060: f32 = vmax2(tmp059);
	let tmp318: vec3<f32> = (vec3<f32>((mix(mix(u_eyes_parameters.v_size, u_anm_angry.v_emotion_size, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_size, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)) * c_eyes_params.v_inside_ratio), (mix(mix(u_eyes_parameters.v_size, u_anm_angry.v_emotion_size, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_size, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)) * tmp613), (mix(mix(u_eyes_parameters.v_size, u_anm_angry.v_emotion_size, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_size, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)) * c_eyes_params.v_inside_ratio)) * vec3<f32>((mix(mix(u_eyes_parameters.v_size, u_anm_angry.v_emotion_size, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_size, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)) * c_eyes_params.v_inside_ratio), (mix(mix(u_eyes_parameters.v_size, u_anm_angry.v_emotion_size, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_size, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)) * tmp613), (mix(mix(u_eyes_parameters.v_size, u_anm_angry.v_emotion_size, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_size, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)) * c_eyes_params.v_inside_ratio)));
	let tmp322: t_one = c_one;
	let tmp307: vec3<f32> = (tmp444 / c_mouth_params.v_o0);
	let tmp587: f32 = (mix(mix(u_eyes_parameters.v_size, u_anm_angry.v_emotion_size, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_size, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)) * tmp613);
	let tmp355: f32 = (tmp352 + tmp356);
	let tmp051: f32 = (tmp049 * tmp045);
	let tmp528: t_one = c_one;
	let tmp527: f32 = opp(((length(((vec3<f32>(abs(tmp549.x), tmp549.y, tmp549.z) * c_one.v_value) - ((vec3<f32>(mix(mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), c_zero.v_value, c_consts_al.v_o0) + vec3<f32>(c_zero.v_value, mix(mix(u_eyes_parameters.v_offset_height, u_anm_angry.v_emotion_offset_height, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_off_height, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), mix(mix(u_eyes_parameters.v_offset, u_anm_angry.v_emotion_offset, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_offset, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)))) + c_eyes_bridge_params.v_o1))) - mix(mix(u_eyes_parameters.v_size, u_anm_angry.v_emotion_size, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_size, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value))) + c_zero.v_value));
	let tmp048: f32 = length(tmp047);
	let tmp498: f32 = ((min((min((min(tmp391, tmp376) - (tmp407 * tmp409)), ((tmp355 + c_zero.v_value) * c_one.v_value)) - (((tmp453 * tmp453) * c_front_leg_param.v_smoothing) * (c_half.v_value * c_half.v_value))), ((((length(tmp307) - tmp313.v_value) * length(tmp307)) / length((tmp444 / tmp309))) + c_zero.v_value)) - ((((max((c_mouth_params.v_o3 - tmp482), c_zero.v_value) / c_mouth_params.v_o3) * (max((c_mouth_params.v_o3 - tmp482), c_zero.v_value) / c_mouth_params.v_o3)) * c_mouth_params.v_o3) * (c_half.v_value * c_half.v_value))) - ((length((((tmp549 * tmp528.v_value) * c_one.v_value) - vec3<f32>(c_zero.v_value, c_zero.v_value, ((c_body_params.v_ass + c_body_params.v_belly.z) * c_minus_one.v_value)))) - c_body_params.v_ass) + c_zero.v_value));
	let tmp374: t_zero = c_zero;
	let tmp473: t_zero = c_zero;
	let tmp471: f32 = (c_mouth_params.v_o3 - tmp482);
	let tmp697: t_minus_one = c_minus_one;
	let tmp131: f32 = (tmp126 * tmp127);
	let tmp134: f32 = (tmp133 - tmp135);
	let tmp138: f32 = (tmp137 + tmp139);
	let tmp140: f32 = (tmp125 * tmp127);
	let tmp143: f32 = (tmp142 + tmp144);
	let tmp405: f32 = min(tmp391, tmp376);
	let tmp192: f32 = abs(tmp180);
	let tmp123: mat3x3<f32> = mat3x3<f32>(tmp131, tmp134, tmp138, tmp140, tmp143, tmp147, tmp149, tmp150, tmp151);
	let tmp321: f32 = (length(tmp316) - tmp322.v_value);
	let tmp529: vec3<f32> = (tmp549 * tmp528.v_value);
	let tmp095: f32 = min(tmp043, tmp080);
	let tmp052: f32 = (tmp051 / tmp048);
	let tmp513: f32 = (tmp527 - (((((tmp321 * length(tmp316)) / length((tmp414 / tmp318))) + c_zero.v_value) + c_zero.v_value) * c_one.v_value));
	let tmp544: f32 = abs(tmp549.x);
	let tmp312: f32 = (length(tmp307) - tmp313.v_value);
	let tmp308: f32 = length(tmp307);
	let tmp317: f32 = length(tmp316);
	let tmp172: vec3<f32> = (tmp195 - tmp583);
	let tmp100: f32 = (tmp097 * tmp099);
	let tmp769: f32 = dot((mix(mix(u_arms_params.v_end, u_arms_params.v_end_angry, vec3<f32>((((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * tmp697.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * tmp697.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * tmp697.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value))), u_arms_params.v_end_sad, vec3<f32>(((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value))) - u_arms_params.v_start), (mix(mix(u_arms_params.v_end, u_arms_params.v_end_angry, vec3<f32>((((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * tmp697.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * tmp697.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * ((c_two.v_value * c_ten.v_ten) * tmp697.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value))), u_arms_params.v_end_sad, vec3<f32>(((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value))) - u_arms_params.v_start));
	let tmp455: f32 = (tmp453 * tmp453);
	let tmp062: f32 = min(tmp060, tmp061.v_value);
	let tmp410: f32 = (tmp407 * tmp409);
	let tmp590: vec3<f32> = c_body_params.v_belly;
	let tmp496: t_one = c_one;
	let tmp266: t_one = c_one;
	let tmp543: vec3<f32> = tmp549;
	let tmp066: f32 = length(tmp063);
	let tmp179: vec3<f32> = (((((t_position(a_pos).v_pos * c_one.v_value) * tmp266.v_value) * c_one.v_value) * c_one.v_value) * tmp178.v_value);
	let tmp373: f32 = (tmp355 + tmp374.v_value);
	let tmp396: t_one = c_one;
	let tmp576: t_face_param = c_face_param;
	let tmp161: f32 = max(tmp160, tmp162.v_value);
	let tmp319: vec3<f32> = (tmp414 / tmp318);
	let tmp510: f32 = abs(tmp498);
	let tmp310: vec3<f32> = (tmp444 / tmp309);
	let tmp118: t_half = c_half;
	let tmp698: f32 = ((c_two.v_value * c_ten.v_ten) * tmp697.v_value);
	let tmp116: f32 = (tmp114 * tmp114);
	let tmp472: f32 = max(tmp471, tmp473.v_value);
	let tmp087: t_zero = c_zero;
	let tmp586: vec3<f32> = vec3<f32>((mix(mix(u_eyes_parameters.v_size, u_anm_angry.v_emotion_size, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * tmp698) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_size, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)) * c_eyes_params.v_inside_ratio), tmp587, (mix(mix(u_eyes_parameters.v_size, u_anm_angry.v_emotion_size, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * tmp698) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_size, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)) * c_eyes_params.v_inside_ratio));
	let tmp457: t_half = c_half;
	let tmp771: f32 = dot((vec3<f32>(abs(tmp529.x), tmp529.y, tmp529.z) - u_arms_params.v_start), (mix(mix(u_arms_params.v_end, u_arms_params.v_end_angry, vec3<f32>((((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * tmp698) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * tmp698) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * tmp698) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value))), u_arms_params.v_end_sad, vec3<f32>(((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value))) - u_arms_params.v_start));
	let tmp183: t_zero = c_zero;
	let tmp267: vec3<f32> = ((t_position(a_pos).v_pos * c_one.v_value) * tmp266.v_value);
	let tmp241: t_one = c_one;
	let tmp545: vec3<f32> = vec3<f32>(tmp544, tmp543.y, tmp543.z);
	let tmp237: f32 = opp(((length(((vec3<f32>(abs(tmp267.x), tmp267.y, tmp267.z) * c_one.v_value) - ((vec3<f32>(mix(mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * tmp698) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), c_zero.v_value, c_consts_al.v_o0) + vec3<f32>(c_zero.v_value, mix(mix(u_eyes_parameters.v_offset_height, u_anm_angry.v_emotion_offset_height, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * tmp698) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_off_height, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), mix(mix(u_eyes_parameters.v_offset, u_anm_angry.v_emotion_offset, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * tmp698) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_offset, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)))) + c_eyes_bridge_params.v_o1))) - mix(mix(u_eyes_parameters.v_size, u_anm_angry.v_emotion_size, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * tmp698) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_size, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * c_minus_one.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value))) + c_zero.v_value));
	let tmp511: t_one = c_one;
	let tmp181: f32 = (c_mouth_params.v_o3 - tmp192);
	let tmp323: f32 = (tmp321 * tmp317);
	let tmp501: t_zero = c_zero;
	let tmp767: t_one = c_one;
	let tmp499: f32 = (c_body_params.v_ass_smoothing - tmp510);
	let tmp320: f32 = length(tmp319);
	let tmp734: t_minus_one = c_minus_one;
	let tmp492: f32 = abs(tmp529.x);
	let tmp530: f32 = ((min((min((min((tmp405 - tmp410), (tmp373 * tmp396.v_value)) - ((tmp455 * c_front_leg_param.v_smoothing) * (tmp457.v_value * tmp457.v_value))), (((tmp312 * tmp308) / length(tmp310)) + c_zero.v_value)) - ((((tmp472 / c_mouth_params.v_o3) * (tmp472 / c_mouth_params.v_o3)) * c_mouth_params.v_o3) * (c_half.v_value * c_half.v_value))), ((length(((tmp529 * tmp496.v_value) - vec3<f32>(c_zero.v_value, c_zero.v_value, ((c_body_params.v_ass + tmp590.z) * c_minus_one.v_value)))) - c_body_params.v_ass) + c_zero.v_value)) - ((((max(tmp499, tmp501.v_value) / c_body_params.v_ass_smoothing) * (max(tmp499, tmp501.v_value) / c_body_params.v_ass_smoothing)) * c_body_params.v_ass_smoothing) * (c_half.v_value * c_half.v_value))) - ((length(((vec3<f32>(tmp492, tmp529.y, tmp529.z) - u_arms_params.v_start) - ((mix(mix(u_arms_params.v_end, u_arms_params.v_end_angry, vec3<f32>((((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * tmp698) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * tmp698) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * tmp698) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value))), u_arms_params.v_end_sad, vec3<f32>(((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value))) - u_arms_params.v_start) * clamp((tmp771 / tmp769), c_zero.v_value, tmp767.v_value)))) - mix(u_arms_params.v_radius_end, u_arms_params.v_radius_start, clamp((dot((vec3<f32>(tmp492, tmp529.y, tmp529.z) - mix(mix(u_arms_params.v_end, u_arms_params.v_end_angry, vec3<f32>((((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * tmp698) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * tmp698) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * tmp698) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value))), u_arms_params.v_end_sad, vec3<f32>(((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)))), (u_arms_params.v_start - mix(mix(u_arms_params.v_end, u_arms_params.v_end_angry, vec3<f32>((((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * tmp698) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * tmp698) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * tmp698) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value))), u_arms_params.v_end_sad, vec3<f32>(((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value))))) / dot((u_arms_params.v_start - mix(mix(u_arms_params.v_end, u_arms_params.v_end_angry, vec3<f32>((((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * tmp698) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * tmp698) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * tmp698) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value))), u_arms_params.v_end_sad, vec3<f32>(((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)))), (u_arms_params.v_start - mix(mix(u_arms_params.v_end, u_arms_params.v_end_angry, vec3<f32>((((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * tmp698) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * tmp698) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * tmp698) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value))), u_arms_params.v_end_sad, vec3<f32>(((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * c_minus_one.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value)))))), c_zero.v_value, c_one.v_value))) * c_one.v_value));
	let tmp411: f32 = (tmp405 - tmp410);
	let tmp208: f32 = ((min((min((min((tmp095 - tmp100), (tmp052 + tmp087.v_value)) - ((tmp116 * tmp576.v_o2) * (tmp118.v_value * tmp118.v_value))), (((tmp062 + tmp066) + c_zero.v_value) * c_one.v_value)) - ((((tmp161 / c_front_leg_param.v_smoothing) * (tmp161 / c_front_leg_param.v_smoothing)) * c_front_leg_param.v_smoothing) * (c_half.v_value * c_half.v_value))), ((((length(((tmp179 - c_mouth_params.v_o1) / c_mouth_params.v_o0)) - c_one.v_value) * length(((tmp179 - c_mouth_params.v_o1) / c_mouth_params.v_o0))) / length(((tmp179 - c_mouth_params.v_o1) / (c_mouth_params.v_o0 * c_mouth_params.v_o0)))) + c_zero.v_value)) - ((((max(tmp181, tmp183.v_value) / c_mouth_params.v_o3) * (max(tmp181, tmp183.v_value) / c_mouth_params.v_o3)) * c_mouth_params.v_o3) * (c_half.v_value * c_half.v_value))) - ((length((((tmp267 * tmp241.v_value) * c_one.v_value) - vec3<f32>(c_zero.v_value, c_zero.v_value, ((c_body_params.v_ass + tmp590.z) * c_minus_one.v_value)))) - c_body_params.v_ass) + c_zero.v_value));
	let tmp474: f32 = (tmp472 / c_mouth_params.v_o3);
	let tmp523: f32 = abs(tmp513);
	let tmp032: t_one = c_one;
	let tmp770: f32 = (tmp771 / tmp769);
	let tmp028: vec3<f32> = (tmp586 * tmp586);
	let tmp026: vec3<f32> = ((tmp123 * tmp172) / tmp586);
	let tmp023: t_one = c_one;
	let tmp019: vec3<f32> = (c_mouth_params.v_o0 * c_mouth_params.v_o0);
	let tmp705: f32 = (c_two.v_value * c_ten.v_ten);
	let tmp458: f32 = (tmp457.v_value * tmp457.v_value);
	let tmp456: f32 = (tmp455 * c_front_leg_param.v_smoothing);
	let tmp491: vec3<f32> = tmp529;
	let tmp311: f32 = length(tmp310);
	let tmp696: f32 = (min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * tmp698);
	let tmp119: f32 = (tmp118.v_value * tmp118.v_value);
	let tmp117: f32 = (tmp116 * tmp576.v_o2);
	let tmp641: vec3<f32> = vec3<f32>((((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * tmp705) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, (tmp696 + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * tmp705) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, (tmp696 + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * tmp705) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, (tmp696 + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - u_seq_1.v_start), c_zero.v_value) / (u_seq_1.v_end - u_seq_1.v_start)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value));
	let tmp642: f32 = (u_animation.v_time - u_seq_1.v_start);
	let tmp017: vec3<f32> = ((tmp179 - c_mouth_params.v_o1) / c_mouth_params.v_o0);
	let tmp648: t_zero = c_zero;
	let tmp314: f32 = (tmp312 * tmp308);
	let tmp593: f32 = (c_body_params.v_ass + tmp590.z);
	let tmp592: t_minus_one = c_minus_one;
	let tmp675: t_minus_one = c_minus_one;
	let tmp397: f32 = (tmp373 * tmp396.v_value);
	let tmp086: f32 = (tmp052 + tmp087.v_value);
	let tmp497: vec3<f32> = (tmp529 * tmp496.v_value);
	let tmp294: vec3<f32> = (u_arms_params.v_start - mix(mix(u_arms_params.v_end, u_arms_params.v_end_angry, tmp641), u_arms_params.v_end_sad, vec3<f32>(((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * tmp675.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * tmp675.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * tmp675.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value))));
	let tmp084: t_zero = c_zero;
	let tmp101: f32 = (tmp095 - tmp100);
	let tmp124: vec3<f32> = (tmp123 * tmp172);
	let tmp154: vec3<f32> = (tmp179 - c_mouth_params.v_o1);
	let tmp163: f32 = (tmp161 / c_front_leg_param.v_smoothing);
	let tmp295: vec3<f32> = (vec3<f32>(tmp492, tmp491.y, tmp491.z) - mix(mix(u_arms_params.v_end, u_arms_params.v_end_angry, tmp641), u_arms_params.v_end_sad, vec3<f32>(((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * tmp675.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * tmp675.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value), ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * tmp675.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((u_animation.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))) * ((c_two.v_value * c_ten.v_ten) * tmp734.v_value)) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((u_animation.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay) + u_seq3.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + u_seq2.v_duration) + u_seq2.v_delay)))))))) * c_one.v_value))));
	let tmp065: f32 = (tmp062 + tmp066);
	let tmp766: t_zero = c_zero;
	let tmp516: t_zero = c_zero;
	let tmp182: f32 = max(tmp181, tmp183.v_value);
	let tmp514: f32 = (c_eyes_params.v_inside_smooth - tmp523);
	let tmp165: f32 = (tmp163 * tmp163);
	let tmp500: f32 = max(tmp499, tmp501.v_value);
	let tmp704: f32 = (min(c_one.v_value, (max(tmp642, tmp648.v_value) / (u_seq_1.v_end - u_seq_1.v_start))) * tmp705);
	let tmp655: t_seq2 = u_seq2;
	let tmp512: vec3<f32> = (tmp545 * tmp511.v_value);
	let tmp478: t_half = c_half;
	let tmp476: f32 = (tmp474 * tmp474);
	let tmp315: f32 = (tmp314 / tmp311);
	let tmp638: vec3<f32> = mix(u_arms_params.v_end, u_arms_params.v_end_angry, tmp641);
	let tmp718: t_seq3 = u_seq3;
	let tmp465: vec3<f32> = (tmp497 - vec3<f32>(c_zero.v_value, c_zero.v_value, (tmp593 * tmp592.v_value)));
	let tmp297: f32 = dot(tmp294, tmp294);
	let tmp120: f32 = (tmp117 * tmp119);
	let tmp167: t_half = c_half;
	let tmp296: f32 = dot(tmp295, tmp294);
	let tmp577: t_front_leg_param = c_front_leg_param;
	let tmp446: t_zero = c_zero;
	let tmp706: t_ten = c_ten;
	let tmp115: f32 = min(tmp101, tmp086);
	let tmp591: f32 = (tmp593 * tmp592.v_value);
	let tmp256: vec3<f32> = tmp267;
	let tmp454: f32 = min(tmp411, tmp397);
	let tmp257: f32 = abs(tmp256.x);
	let tmp647: f32 = max(tmp642, tmp648.v_value);
	let tmp106: t_one = c_one;
	let tmp459: f32 = (tmp456 * tmp458);
	let tmp542: f32 = abs(tmp530);
	let tmp643: f32 = (u_seq_1.v_end - u_seq_1.v_start);
	let tmp493: vec3<f32> = vec3<f32>(tmp492, tmp491.y, tmp491.z);
	let tmp223: f32 = (tmp237 - ((((((length(tmp026) - tmp032.v_value) * length(tmp026)) / length((tmp124 / tmp028))) + c_zero.v_value) + c_zero.v_value) * c_one.v_value));
	let tmp324: f32 = (tmp323 / tmp320);
	let tmp220: f32 = abs(tmp208);
	let tmp686: f32 = (tmp696 + tmp706.v_ten);
	let tmp735: f32 = ((c_two.v_value * c_ten.v_ten) * tmp734.v_value);
	let tmp749: t_animation = u_animation;
	let tmp018: f32 = length(tmp017);
	let tmp083: f32 = (tmp065 + tmp084.v_value);
	let tmp759: f32 = dot((vec3<f32>(abs((tmp267 * tmp241.v_value).x), (tmp267 * tmp241.v_value).y, (tmp267 * tmp241.v_value).z) - u_arms_params.v_start), (mix(tmp638, u_arms_params.v_end_sad, vec3<f32>(((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((tmp749.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((tmp749.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((tmp749.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((tmp749.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * tmp675.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((tmp749.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((tmp749.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((tmp749.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)))) * tmp735) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((tmp749.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)))))))) * c_one.v_value), ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((tmp749.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((tmp749.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((tmp749.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((tmp749.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * tmp675.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((tmp749.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((tmp749.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((tmp749.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)))) * tmp735) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((tmp749.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)))))))) * c_one.v_value), ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((tmp749.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((tmp749.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((tmp749.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((tmp749.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * tmp675.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((tmp749.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((tmp749.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((tmp749.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)))) * tmp735) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((tmp749.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)))))))) * c_one.v_value))) - u_arms_params.v_start));
	let tmp595: t_zero = c_zero;
	let tmp640: vec3<f32> = vec3<f32>(((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((tmp749.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((tmp749.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((tmp749.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((tmp749.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * tmp675.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((tmp749.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((tmp749.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((tmp749.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)))) * tmp735) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((tmp749.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)))))))) * c_one.v_value), ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((tmp749.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((tmp749.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((tmp749.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((tmp749.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * tmp675.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((tmp749.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((tmp749.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((tmp749.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)))) * tmp735) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((tmp749.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)))))))) * c_one.v_value), ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((tmp749.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((tmp749.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (min(c_one.v_value, (max((tmp749.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((tmp749.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay)))) * (c_two.v_value * tmp675.v_value)) + c_two.v_value), (c_one.v_value + c_two.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((tmp749.v_time - (u_seq_1.v_end + u_seq_1.v_delay)), c_zero.v_value) / (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) - (u_seq_1.v_end + u_seq_1.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((tmp749.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((tmp749.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)))) * tmp735) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((tmp749.v_time - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((u_seq_1.v_end + u_seq_1.v_delay) + tmp655.v_duration) + tmp655.v_delay)))))))) * c_one.v_value));
	let tmp206: t_one = c_one;
	let tmp242: vec3<f32> = (tmp267 * tmp241.v_value);
	let tmp649: t_seq_1 = u_seq_1;
	let tmp772: vec3<f32> = (mix(tmp638, u_arms_params.v_end_sad, tmp640) - u_arms_params.v_start);
	let tmp031: f32 = (length(tmp026) - tmp032.v_value);
	let tmp029: vec3<f32> = (tmp124 / tmp028);
	let tmp027: f32 = length(tmp026);
	let tmp757: f32 = dot((mix(tmp638, u_arms_params.v_end_sad, tmp640) - u_arms_params.v_start), (mix(tmp638, u_arms_params.v_end_sad, tmp640) - u_arms_params.v_start));
	let tmp443: t_zero = c_zero;
	let tmp022: f32 = (tmp018 - tmp023.v_value);
	let tmp020: vec3<f32> = (tmp154 / tmp019);
	let tmp677: f32 = (c_two.v_value * tmp675.v_value);
	let tmp768: f32 = clamp(tmp770, tmp766.v_value, tmp767.v_value);
	let tmp533: t_zero = c_zero;
	let tmp531: f32 = (u_arms_params.v_smooth - tmp542);
	let tmp672: t_two = c_two;
	let tmp515: f32 = max(tmp514, tmp516.v_value);
	let tmp488: vec3<f32> = (tmp512 - ((vec3<f32>(mix(mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, (tmp704 - tmp706.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, tmp686)) / c_two.v_value), round(min(c_one.v_value, (tmp647 / tmp643))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((tmp749.v_time - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((tmp749.v_time - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)))) * tmp735) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((tmp749.v_time - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((tmp749.v_time - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((tmp749.v_time - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)))) * tmp735) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((tmp749.v_time - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((tmp749.v_time - (tmp649.v_end + tmp649.v_delay)), c_zero.v_value) / (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) - (tmp649.v_end + tmp649.v_delay)))) * (min(c_one.v_value, (max((tmp749.v_time - (tmp649.v_end + tmp649.v_delay)), c_zero.v_value) / (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) - (tmp649.v_end + tmp649.v_delay)))) * (min(c_one.v_value, (max((tmp749.v_time - (tmp649.v_end + tmp649.v_delay)), c_zero.v_value) / (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) - (tmp649.v_end + tmp649.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((tmp749.v_time - (tmp649.v_end + tmp649.v_delay)), c_zero.v_value) / (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) - (tmp649.v_end + tmp649.v_delay)))) * tmp677) + c_two.v_value), (c_one.v_value + tmp672.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((tmp749.v_time - (tmp649.v_end + tmp649.v_delay)), c_zero.v_value) / (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) - (tmp649.v_end + tmp649.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((tmp749.v_time - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((tmp749.v_time - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)))) * tmp735) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((tmp749.v_time - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)))))))) * c_one.v_value)), c_zero.v_value, c_consts_al.v_o0) + vec3<f32>(c_zero.v_value, mix(mix(u_eyes_parameters.v_offset_height, u_anm_angry.v_emotion_offset_height, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, (tmp704 - tmp706.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, tmp686)) / c_two.v_value), round(min(c_one.v_value, (tmp647 / tmp643))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((tmp749.v_time - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((tmp749.v_time - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)))) * tmp735) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((tmp749.v_time - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((tmp749.v_time - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((tmp749.v_time - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)))) * tmp735) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((tmp749.v_time - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_off_height, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((tmp749.v_time - (tmp649.v_end + tmp649.v_delay)), c_zero.v_value) / (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) - (tmp649.v_end + tmp649.v_delay)))) * (min(c_one.v_value, (max((tmp749.v_time - (tmp649.v_end + tmp649.v_delay)), c_zero.v_value) / (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) - (tmp649.v_end + tmp649.v_delay)))) * (min(c_one.v_value, (max((tmp749.v_time - (tmp649.v_end + tmp649.v_delay)), c_zero.v_value) / (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) - (tmp649.v_end + tmp649.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((tmp749.v_time - (tmp649.v_end + tmp649.v_delay)), c_zero.v_value) / (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) - (tmp649.v_end + tmp649.v_delay)))) * tmp677) + c_two.v_value), (c_one.v_value + tmp672.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((tmp749.v_time - (tmp649.v_end + tmp649.v_delay)), c_zero.v_value) / (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) - (tmp649.v_end + tmp649.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((tmp749.v_time - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((tmp749.v_time - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)))) * tmp735) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((tmp749.v_time - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)))))))) * c_one.v_value)), mix(mix(u_eyes_parameters.v_offset, u_anm_angry.v_emotion_offset, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, (tmp704 - tmp706.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, tmp686)) / c_two.v_value), round(min(c_one.v_value, (tmp647 / tmp643))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((tmp749.v_time - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((tmp749.v_time - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)))) * tmp735) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((tmp749.v_time - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((tmp749.v_time - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((tmp749.v_time - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)))) * tmp735) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((tmp749.v_time - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)))))))) * c_one.v_value)), u_anm_sad.v_emo_offset, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((tmp749.v_time - (tmp649.v_end + tmp649.v_delay)), c_zero.v_value) / (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) - (tmp649.v_end + tmp649.v_delay)))) * (min(c_one.v_value, (max((tmp749.v_time - (tmp649.v_end + tmp649.v_delay)), c_zero.v_value) / (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) - (tmp649.v_end + tmp649.v_delay)))) * (min(c_one.v_value, (max((tmp749.v_time - (tmp649.v_end + tmp649.v_delay)), c_zero.v_value) / (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) - (tmp649.v_end + tmp649.v_delay)))) * (c_two.v_value + c_two.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((tmp749.v_time - (tmp649.v_end + tmp649.v_delay)), c_zero.v_value) / (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) - (tmp649.v_end + tmp649.v_delay)))) * tmp677) + c_two.v_value), (c_one.v_value + tmp672.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((tmp749.v_time - (tmp649.v_end + tmp649.v_delay)), c_zero.v_value) / (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) - (tmp649.v_end + tmp649.v_delay))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max((tmp749.v_time - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)))) * (c_two.v_value * c_ten.v_ten)) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, ((min(c_one.v_value, (max((tmp749.v_time - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)))) * tmp735) + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max((tmp749.v_time - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (((((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration) - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)))))))) * c_one.v_value)))) + c_eyes_bridge_params.v_o1));
	let tmp479: f32 = (tmp478.v_value * tmp478.v_value);
	let tmp477: f32 = (tmp476 * c_mouth_params.v_o3);
	let tmp464: t_zero = c_zero;
	let tmp442: f32 = (tmp324 + tmp443.v_value);
	let tmp121: f32 = (tmp115 - tmp120);
	let tmp765: vec3<f32> = (tmp772 * tmp768);
	let tmp758: f32 = (tmp759 / tmp757);
	let tmp305: f32 = length(tmp465);
	let tmp302: t_zero = c_zero;
	let tmp301: t_one = c_one;
	let tmp298: f32 = (tmp296 / tmp297);
	let tmp755: t_one = c_one;
	let tmp754: t_zero = c_zero;
	let tmp670: t_one = c_one;
	let tmp258: vec3<f32> = vec3<f32>(tmp257, tmp256.y, tmp256.z);
	let tmp746: f32 = ((((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay) + tmp718.v_duration);
	let tmp243: f32 = ((min((min((min(tmp121, (tmp083 * tmp106.v_value)) - ((tmp165 * tmp577.v_smoothing) * (tmp167.v_value * tmp167.v_value))), (((tmp022 * tmp018) / length(tmp020)) + c_zero.v_value)) - ((((tmp182 / c_mouth_params.v_o3) * (tmp182 / c_mouth_params.v_o3)) * c_mouth_params.v_o3) * (c_half.v_value * c_half.v_value))), ((length(((tmp242 * tmp206.v_value) - vec3<f32>(tmp595.v_value, tmp595.v_value, tmp591))) - c_body_params.v_ass) + c_zero.v_value)) - ((((max((c_body_params.v_ass_smoothing - tmp220), c_zero.v_value) / c_body_params.v_ass_smoothing) * (max((c_body_params.v_ass_smoothing - tmp220), c_zero.v_value) / c_body_params.v_ass_smoothing)) * c_body_params.v_ass_smoothing) * (c_half.v_value * c_half.v_value))) - ((length(((vec3<f32>(abs(tmp242.x), tmp242.y, tmp242.z) - u_arms_params.v_start) - ((mix(tmp638, u_arms_params.v_end_sad, tmp640) - u_arms_params.v_start) * clamp(tmp758, tmp754.v_value, tmp755.v_value)))) - mix(u_arms_params.v_radius_end, u_arms_params.v_radius_start, clamp((dot((vec3<f32>(abs(tmp242.x), tmp242.y, tmp242.z) - mix(tmp638, u_arms_params.v_end_sad, tmp640)), (u_arms_params.v_start - mix(tmp638, u_arms_params.v_end_sad, tmp640))) / dot((u_arms_params.v_start - mix(tmp638, u_arms_params.v_end_sad, tmp640)), (u_arms_params.v_start - mix(tmp638, u_arms_params.v_end_sad, tmp640)))), c_zero.v_value, c_one.v_value))) * c_one.v_value));
	let tmp233: f32 = abs(tmp223);
	let tmp221: t_one = c_one;
	let tmp733: f32 = (min(c_one.v_value, (max((tmp749.v_time - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)), c_zero.v_value) / (tmp746 - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay)))) * tmp735);
	let tmp211: t_zero = c_zero;
	let tmp209: f32 = (c_body_params.v_ass_smoothing - tmp220);
	let tmp202: f32 = abs(tmp242.x);
	let tmp717: t_zero = c_zero;
	let tmp711: f32 = (tmp749.v_time - (((tmp649.v_end + tmp649.v_delay) + tmp655.v_duration) + tmp655.v_delay));
	let tmp168: f32 = (tmp167.v_value * tmp167.v_value);
	let tmp166: f32 = (tmp165 * tmp577.v_smoothing);
	let tmp703: f32 = (tmp704 - tmp706.v_ten);
	let tmp699: f32 = pow(c_two.v_value, tmp686);
	let tmp639: vec3<f32> = mix(tmp638, u_arms_params.v_end_sad, tmp640);
	let tmp004: vec3<f32> = (u_arms_params.v_start - tmp639);
	let tmp201: vec3<f32> = tmp242;
	let tmp662: t_zero = c_zero;
	let tmp663: f32 = (tmp649.v_end + tmp649.v_delay);
	let tmp710: f32 = ((tmp663 + tmp655.v_duration) + tmp655.v_delay);
	let tmp773: vec3<f32> = (tmp493 - u_arms_params.v_start);
	let tmp460: f32 = (tmp454 - tmp459);
	let tmp594: vec3<f32> = vec3<f32>(tmp595.v_value, tmp595.v_value, tmp591);
	let tmp684: t_two = c_two;
	let tmp676: t_two = c_two;
	let tmp664: f32 = (tmp663 + tmp655.v_duration);
	let tmp033: f32 = (tmp031 * tmp027);
	let tmp445: f32 = (tmp315 + tmp446.v_value);
	let tmp207: vec3<f32> = (tmp242 * tmp206.v_value);
	let tmp030: f32 = length(tmp029);
	let tmp502: f32 = (tmp500 / c_body_params.v_ass_smoothing);
	let tmp184: f32 = (tmp182 / c_mouth_params.v_o3);
	let tmp742: f32 = (c_two.v_value * c_ten.v_ten);
	let tmp024: f32 = (tmp022 * tmp018);
	let tmp107: f32 = (tmp083 * tmp106.v_value);
	let tmp646: t_one = c_one;
	let tmp021: f32 = length(tmp020);
	let tmp644: f32 = (tmp647 / tmp643);
	let tmp550: f32 = ((min((min((min(tmp460, tmp445) - (tmp477 * tmp479)), ((tmp305 - c_body_params.v_ass) + c_zero.v_value)) - (((tmp502 * tmp502) * c_body_params.v_ass_smoothing) * (c_half.v_value * c_half.v_value))), ((length((tmp773 - tmp765)) - mix(u_arms_params.v_radius_end, u_arms_params.v_radius_start, clamp(tmp298, tmp302.v_value, tmp301.v_value))) * c_one.v_value)) - ((((max(tmp531, tmp533.v_value) / u_arms_params.v_smooth) * (max(tmp531, tmp533.v_value) / u_arms_params.v_smooth)) * u_arms_params.v_smooth) * (c_half.v_value * c_half.v_value))) - ((max(((length(tmp488) - mix(mix(u_eyes_parameters.v_size, u_anm_angry.v_emotion_size, (((mix(c_zero.v_value, c_one.v_value, mix((pow(c_two.v_value, tmp703) / c_two.v_value), ((c_two.v_value - tmp699) / c_two.v_value), round(min(tmp646.v_value, tmp644)))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max(tmp711, tmp717.v_value) / (tmp746 - tmp710))) * tmp742) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, (tmp733 + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max(tmp711, tmp717.v_value) / (tmp746 - tmp710))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max(tmp711, tmp717.v_value) / (tmp746 - tmp710))) * tmp742) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, (tmp733 + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max(tmp711, tmp717.v_value) / (tmp746 - tmp710))))))) * c_one.v_value)), u_anm_sad.v_emo_size, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (max((tmp749.v_time - tmp663), tmp662.v_value) / (tmp664 - tmp663))) * (min(c_one.v_value, (max((tmp749.v_time - tmp663), tmp662.v_value) / (tmp664 - tmp663))) * (min(c_one.v_value, (max((tmp749.v_time - tmp663), tmp662.v_value) / (tmp664 - tmp663))) * (tmp684.v_value + tmp684.v_value)))), (c_one.v_value - (pow(((min(c_one.v_value, (max((tmp749.v_time - tmp663), tmp662.v_value) / (tmp664 - tmp663))) * tmp677) + tmp676.v_value), (tmp670.v_value + tmp672.v_value)) / c_two.v_value)), round(min(c_one.v_value, (max((tmp749.v_time - tmp663), tmp662.v_value) / (tmp664 - tmp663)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (max(tmp711, tmp717.v_value) / (tmp746 - tmp710))) * tmp742) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, (tmp733 + c_ten.v_ten))) / c_two.v_value), round(min(c_one.v_value, (max(tmp711, tmp717.v_value) / (tmp746 - tmp710))))))) * c_one.v_value))) + c_zero.v_value), opp(((tmp442 + tmp464.v_value) * c_one.v_value))) + ((((tmp515 / c_eyes_params.v_inside_smooth) * (tmp515 / c_eyes_params.v_inside_smooth)) * c_eyes_params.v_inside_smooth) * (c_half.v_value * c_half.v_value))) * c_one.v_value));
	let tmp674: f32 = (min(c_one.v_value, (max((tmp749.v_time - tmp663), tmp662.v_value) / (tmp664 - tmp663))) * tmp677);
	let tmp005: vec3<f32> = (vec3<f32>(tmp202, tmp201.y, tmp201.z) - tmp639);
	let tmp656: f32 = (tmp749.v_time - tmp663);
	let tmp203: vec3<f32> = vec3<f32>(tmp202, tmp201.y, tmp201.z);
	let tmp486: t_one = c_one;
	let tmp226: t_zero = c_zero;
	let tmp186: f32 = (tmp184 * tmp184);
	let tmp224: f32 = (c_eyes_params.v_inside_smooth - tmp233);
	let tmp188: t_half = c_half;
	let tmp480: f32 = (tmp477 * tmp479);
	let tmp303: f32 = length(tmp488);
	let tmp716: f32 = max(tmp711, tmp717.v_value);
	let tmp153: t_zero = c_zero;
	let tmp475: f32 = min(tmp460, tmp445);
	let tmp306: f32 = (tmp305 - c_body_params.v_ass);
	let tmp562: f32 = abs(tmp550);
	let tmp504: f32 = (tmp502 * tmp502);
	let tmp463: f32 = (tmp442 + tmp464.v_value);
	let tmp723: f32 = (tmp733 + c_ten.v_ten);
	let tmp255: f32 = abs(tmp243);
	let tmp532: f32 = max(tmp531, tmp533.v_value);
	let tmp671: f32 = (tmp670.v_value + tmp672.v_value);
	let tmp300: f32 = clamp(tmp298, tmp302.v_value, tmp301.v_value);
	let tmp156: t_zero = c_zero;
	let tmp707: t_two = c_two;
	let tmp635: f32 = mix(u_eyes_parameters.v_spacing, u_anm_angry.v_emo_spacing, (((mix(c_zero.v_value, c_one.v_value, mix((pow(tmp707.v_value, tmp703) / tmp707.v_value), ((tmp707.v_value - tmp699) / tmp707.v_value), round(min(tmp646.v_value, tmp644)))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (tmp716 / (tmp746 - tmp710))) * tmp742) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, tmp723)) / c_two.v_value), round(min(c_one.v_value, (tmp716 / (tmp746 - tmp710))))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, ((min(c_one.v_value, (tmp716 / (tmp746 - tmp710))) * tmp742) - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, tmp723)) / c_two.v_value), round(min(c_one.v_value, (tmp716 / (tmp746 - tmp710))))))) * c_one.v_value));
	let tmp467: t_zero = c_zero;
	let tmp741: f32 = (min(c_one.v_value, (tmp716 / (tmp746 - tmp710))) * tmp742);
	let tmp169: f32 = (tmp166 * tmp168);
	let tmp517: f32 = (tmp515 / c_eyes_params.v_inside_smooth);
	let tmp175: vec3<f32> = (tmp207 - tmp594);
	let tmp764: vec3<f32> = (tmp773 - tmp765);
	let tmp712: f32 = (tmp746 - tmp710);
	let tmp596: t_position = t_position(a_pos);
	let tmp506: t_half = c_half;
	let tmp760: vec3<f32> = (tmp639 - u_arms_params.v_start);
	let tmp694: f32 = (tmp707.v_value - tmp699);
	let tmp626: f32 = mix(u_eyes_parameters.v_offset, u_anm_angry.v_emotion_offset, (((mix(c_zero.v_value, c_one.v_value, mix((pow(tmp707.v_value, tmp703) / tmp707.v_value), (tmp694 / tmp707.v_value), round(min(tmp646.v_value, tmp644)))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, (tmp741 - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, tmp723)) / c_two.v_value), round(min(c_one.v_value, (tmp716 / tmp712)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, (tmp741 - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, tmp723)) / c_two.v_value), round(min(c_one.v_value, (tmp716 / tmp712)))))) * c_one.v_value));
	let tmp625: f32 = mix(u_eyes_parameters.v_offset_height, u_anm_angry.v_emotion_offset_height, (((mix(c_zero.v_value, c_one.v_value, mix((pow(tmp707.v_value, tmp703) / tmp707.v_value), (tmp694 / tmp707.v_value), round(min(tmp646.v_value, tmp644)))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, (tmp741 - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, tmp723)) / c_two.v_value), round(min(c_one.v_value, (tmp716 / tmp712)))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, (tmp741 - c_ten.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, tmp723)) / c_two.v_value), round(min(c_one.v_value, (tmp716 / tmp712)))))) * c_one.v_value));
	let tmp645: f32 = min(tmp646.v_value, tmp644);
	let tmp210: f32 = max(tmp209, tmp211.v_value);
	let tmp164: f32 = min(tmp121, tmp107);
	let tmp743: t_ten = c_ten;
	let tmp673: f32 = (tmp674 + tmp676.v_value);
	let tmp685: f32 = (tmp684.v_value + tmp684.v_value);
	let tmp589: t_mouth_params = c_mouth_params;
	let tmp708: f32 = pow(tmp707.v_value, tmp703);
	let tmp222: vec3<f32> = (tmp258 * tmp221.v_value);
	let tmp661: f32 = max(tmp656, tmp662.v_value);
	let tmp756: f32 = clamp(tmp758, tmp754.v_value, tmp755.v_value);
	let tmp034: f32 = (tmp033 / tmp030);
	let tmp025: f32 = (tmp024 / tmp021);
	let tmp657: f32 = (tmp664 - tmp663);
	let tmp007: f32 = dot(tmp004, tmp004);
	let tmp006: f32 = dot(tmp005, tmp004);
	let tmp505: f32 = (tmp504 * c_body_params.v_ass_smoothing);
	let tmp636: f32 = mix(tmp635, u_anm_sad.v_emo_spacing, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (tmp661 / tmp657)) * (min(c_one.v_value, (tmp661 / tmp657)) * (min(c_one.v_value, (tmp661 / tmp657)) * tmp685))), (c_one.v_value - (pow(tmp673, tmp671) / c_two.v_value)), round(min(c_one.v_value, (tmp661 / tmp657))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, (tmp741 - tmp743.v_ten)) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, tmp723)) / c_two.v_value), round(min(c_one.v_value, (tmp716 / tmp712)))))) * c_one.v_value));
	let tmp246: t_zero = c_zero;
	let tmp244: f32 = (u_arms_params.v_smooth - tmp255);
	let tmp507: f32 = (tmp506.v_value * tmp506.v_value);
	let tmp740: f32 = (tmp741 - tmp743.v_ten);
	let tmp487: f32 = (tmp463 * tmp486.v_value);
	let tmp634: f32 = mix(tmp625, u_anm_sad.v_emo_off_height, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (tmp661 / tmp657)) * (min(c_one.v_value, (tmp661 / tmp657)) * (min(c_one.v_value, (tmp661 / tmp657)) * tmp685))), (c_one.v_value - (pow(tmp673, tmp671) / c_two.v_value)), round(min(c_one.v_value, (tmp661 / tmp657))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, tmp740) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, tmp723)) / c_two.v_value), round(min(c_one.v_value, (tmp716 / tmp712)))))) * c_one.v_value));
	let tmp633: f32 = mix(tmp626, u_anm_sad.v_emo_offset, ((mix(c_zero.v_value, c_one.v_value, mix((min(c_one.v_value, (tmp661 / tmp657)) * (min(c_one.v_value, (tmp661 / tmp657)) * (min(c_one.v_value, (tmp661 / tmp657)) * tmp685))), (c_one.v_value - (pow(tmp673, tmp671) / c_two.v_value)), round(min(c_one.v_value, (tmp661 / tmp657))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, tmp740) / c_two.v_value), ((c_two.v_value - pow(c_two.v_value, tmp723)) / c_two.v_value), round(min(c_one.v_value, (tmp716 / tmp712)))))) * c_one.v_value));
	let tmp605: t_zero = c_zero;
	let tmp604: t_consts_al = c_consts_al;
	let tmp534: f32 = (tmp532 / u_arms_params.v_smooth);
	let tmp225: f32 = max(tmp224, tmp226.v_value);
	let tmp575: t_zero = c_zero;
	let tmp736: f32 = pow(c_two.v_value, tmp723);
	let tmp518: f32 = (tmp517 * tmp517);
	let tmp212: f32 = (tmp210 / c_body_params.v_ass_smoothing);
	let tmp763: f32 = length(tmp764);
	let tmp289: vec3<f32> = tmp596.v_pos;
	let tmp563: t_position = t_position(a_pos);
	let tmp660: t_one = c_one;
	let tmp198: vec3<f32> = (tmp222 - ((vec3<f32>(tmp636, tmp605.v_value, tmp604.v_o0) + vec3<f32>(tmp575.v_value, tmp634, tmp633)) + c_eyes_bridge_params.v_o1));
	let tmp553: t_zero = c_zero;
	let tmp680: f32 = pow(tmp673, tmp671);
	let tmp551: f32 = (c_eyes_params.v_smoothing - tmp562);
	let tmp189: f32 = (tmp188.v_value * tmp188.v_value);
	let tmp187: f32 = (tmp186 * tmp589.v_o3);
	let tmp715: t_one = c_one;
	let tmp713: f32 = (tmp716 / tmp712);
	let tmp174: t_zero = c_zero;
	let tmp683: f32 = (min(tmp660.v_value, (tmp661 / tmp657)) * tmp685);
	let tmp761: vec3<f32> = (tmp203 - u_arms_params.v_start);
	let tmp695: f32 = (tmp694 / tmp707.v_value);
	let tmp520: t_half = c_half;
	let tmp481: f32 = (tmp475 - tmp480);
	let tmp299: f32 = mix(u_arms_params.v_radius_end, u_arms_params.v_radius_start, tmp300);
	let tmp490: t_zero = c_zero;
	let tmp155: f32 = (tmp025 + tmp156.v_value);
	let tmp170: f32 = (tmp164 - tmp169);
	let tmp702: f32 = (tmp708 / tmp707.v_value);
	let tmp268: f32 = ((min((min((min(tmp170, tmp155) - (tmp187 * tmp189)), ((length(tmp175) - c_body_params.v_ass) + c_zero.v_value)) - (((tmp212 * tmp212) * c_body_params.v_ass_smoothing) * (c_half.v_value * c_half.v_value))), ((length((tmp761 - (tmp760 * tmp756))) - mix(u_arms_params.v_radius_end, u_arms_params.v_radius_start, clamp((tmp006 / tmp007), c_zero.v_value, c_one.v_value))) * c_one.v_value)) - ((((max(tmp244, tmp246.v_value) / u_arms_params.v_smooth) * (max(tmp244, tmp246.v_value) / u_arms_params.v_smooth)) * u_arms_params.v_smooth) * (c_half.v_value * c_half.v_value))) - ((max(((length(tmp198) - mix(mix(u_eyes_parameters.v_size, u_anm_angry.v_emotion_size, (((mix(c_zero.v_value, c_one.v_value, mix(tmp702, tmp695, round(tmp645))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, tmp740) / c_two.v_value), ((c_two.v_value - tmp736) / c_two.v_value), round(min(tmp715.v_value, tmp713))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, tmp740) / c_two.v_value), ((c_two.v_value - tmp736) / c_two.v_value), round(min(tmp715.v_value, tmp713))))) * c_one.v_value)), u_anm_sad.v_emo_size, ((mix(c_zero.v_value, c_one.v_value, mix((min(tmp660.v_value, (tmp661 / tmp657)) * (min(tmp660.v_value, (tmp661 / tmp657)) * tmp683)), (c_one.v_value - (tmp680 / c_two.v_value)), round(min(tmp660.v_value, (tmp661 / tmp657))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, tmp740) / c_two.v_value), ((c_two.v_value - tmp736) / c_two.v_value), round(min(tmp715.v_value, tmp713))))) * c_one.v_value))) + c_zero.v_value), opp((((tmp034 + tmp153.v_value) + tmp174.v_value) * c_one.v_value))) + ((((tmp225 / c_eyes_params.v_inside_smooth) * (tmp225 / c_eyes_params.v_inside_smooth)) * c_eyes_params.v_inside_smooth) * (c_half.v_value * c_half.v_value))) * c_one.v_value));
	let tmp290: f32 = abs(tmp289.x);
	let tmp700: f32 = round(tmp645);
	let tmp658: f32 = (tmp661 / tmp657);
	let tmp281: t_one = c_one;
	let tmp304: f32 = (tmp303 - mix(mix(u_eyes_parameters.v_size, u_anm_angry.v_emotion_size, (((mix(c_zero.v_value, c_one.v_value, mix(tmp702, tmp695, tmp700)) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, tmp740) / c_two.v_value), ((c_two.v_value - tmp736) / c_two.v_value), round(min(tmp715.v_value, tmp713))))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, tmp740) / c_two.v_value), ((c_two.v_value - tmp736) / c_two.v_value), round(min(tmp715.v_value, tmp713))))) * c_one.v_value)), u_anm_sad.v_emo_size, ((mix(c_zero.v_value, c_one.v_value, mix((min(tmp660.v_value, tmp658) * (min(tmp660.v_value, tmp658) * tmp683)), (c_one.v_value - (tmp680 / c_two.v_value)), round(min(tmp660.v_value, tmp658)))) * mix(c_one.v_value, c_zero.v_value, mix((pow(c_two.v_value, tmp740) / c_two.v_value), ((c_two.v_value - tmp736) / c_two.v_value), round(min(tmp715.v_value, tmp713))))) * c_one.v_value)));
	let tmp753: vec3<f32> = (tmp760 * tmp756);
	let tmp466: f32 = (tmp306 + tmp467.v_value);
	let tmp015: f32 = length(tmp175);
	let tmp012: t_zero = c_zero;
	let tmp011: t_one = c_one;
	let tmp008: f32 = (tmp006 / tmp007);
	let tmp152: f32 = (tmp034 + tmp153.v_value);
	let tmp668: t_two = c_two;
	let tmp701: f32 = mix(tmp702, tmp695, tmp700);
	let tmp508: f32 = (tmp505 * tmp507);
	let tmp731: f32 = (c_two.v_value - tmp736);
	let tmp659: f32 = min(tmp660.v_value, tmp658);
	let tmp196: t_one = c_one;
	let tmp245: f32 = max(tmp244, tmp246.v_value);
	let tmp714: f32 = min(tmp715.v_value, tmp713);
	let tmp536: f32 = (tmp534 * tmp534);
	let tmp185: f32 = min(tmp170, tmp155);
	let tmp745: f32 = pow(c_two.v_value, tmp740);
	let tmp669: f32 = (tmp680 / tmp668.v_value);
	let tmp190: f32 = (tmp187 * tmp189);
	let tmp521: f32 = (tmp520.v_value * tmp520.v_value);
	let tmp682: f32 = (tmp659 * tmp683);
	let tmp565: t_body_params = c_body_params;
	let tmp282: vec3<f32> = (tmp563.v_pos * tmp281.v_value);
	let tmp552: f32 = max(tmp551, tmp553.v_value);
	let tmp291: vec3<f32> = vec3<f32>(tmp290, tmp289.y, tmp289.z);
	let tmp519: f32 = (tmp518 * c_eyes_params.v_inside_smooth);
	let tmp494: t_one = c_one;
	let tmp678: t_one = c_one;
	let tmp177: t_zero = c_zero;
	let tmp503: f32 = min(tmp481, tmp466);
	let tmp214: f32 = (tmp212 * tmp212);
	let tmp573: vec3<f32> = vec3<f32>(tmp575.v_value, tmp634, tmp633);
	let tmp603: vec3<f32> = vec3<f32>(tmp636, tmp605.v_value, tmp604.v_o0);
	let tmp280: f32 = abs(tmp268);
	let tmp173: f32 = (tmp152 + tmp174.v_value);
	let tmp744: t_two = c_two;
	let tmp016: f32 = (tmp015 - tmp565.v_ass);
	let tmp227: f32 = (tmp225 / c_eyes_params.v_inside_smooth);
	let tmp013: f32 = length(tmp198);
	let tmp526: f32 = opp(tmp487);
	let tmp538: t_half = c_half;
	let tmp010: f32 = clamp(tmp008, tmp012.v_value, tmp011.v_value);
	let tmp216: t_half = c_half;
	let tmp489: f32 = (tmp304 + tmp490.v_value);
	let tmp762: f32 = (tmp763 - tmp299);
	let tmp752: vec3<f32> = (tmp761 - tmp753);
	let tmp495: f32 = (tmp762 * tmp494.v_value);
	let tmp666: f32 = round(tmp659);
	let tmp269: f32 = (c_eyes_params.v_smoothing - tmp280);
	let tmp751: f32 = length(tmp752);
	let tmp262: f32 = abs(tmp282.x);
	let tmp191: f32 = (tmp185 - tmp190);
	let tmp197: f32 = (tmp173 * tmp196.v_value);
	let tmp176: f32 = (tmp016 + tmp177.v_value);
	let tmp739: f32 = (tmp745 / tmp744.v_value);
	let tmp228: f32 = (tmp227 * tmp227);
	let tmp737: f32 = round(tmp714);
	let tmp217: f32 = (tmp216.v_value * tmp216.v_value);
	let tmp215: f32 = (tmp214 * tmp565.v_ass_smoothing);
	let tmp522: f32 = (tmp519 * tmp521);
	let tmp732: f32 = (tmp731 / tmp744.v_value);
	let tmp286: vec3<f32> = (tmp291 - ((tmp603 + tmp573) + c_eyes_bridge_params.v_o1));
	let tmp524: f32 = max(tmp489, tmp526);
	let tmp200: t_zero = c_zero;
	let tmp230: t_half = c_half;
	let tmp247: f32 = (tmp245 / u_arms_params.v_smooth);
	let tmp554: f32 = (tmp552 / c_eyes_params.v_smoothing);
	let tmp509: f32 = (tmp503 - tmp508);
	let tmp261: vec3<f32> = tmp282;
	let tmp271: t_zero = c_zero;
	let tmp619: t_anm_angry = u_anm_angry;
	let tmp014: f32 = (tmp013 - mix(mix(u_eyes_parameters.v_size, tmp619.v_emotion_size, (((mix(c_zero.v_value, c_one.v_value, tmp701) * mix(c_one.v_value, c_zero.v_value, mix(tmp739, tmp732, tmp737))) * mix(c_one.v_value, c_zero.v_value, mix(tmp739, tmp732, tmp737))) * c_one.v_value)), u_anm_sad.v_emo_size, ((mix(c_zero.v_value, c_one.v_value, mix((tmp659 * tmp682), (tmp678.v_value - tmp669), tmp666)) * mix(c_one.v_value, c_zero.v_value, mix(tmp739, tmp732, tmp737))) * c_one.v_value)));
	let tmp537: f32 = (tmp536 * u_arms_params.v_smooth);
	let tmp602: t_eyes_parameters = u_eyes_parameters;
	let tmp566: t_eyes_bridge_params = c_eyes_bridge_params;
	let tmp539: f32 = (tmp538.v_value * tmp538.v_value);
	let tmp009: f32 = mix(u_arms_params.v_radius_end, u_arms_params.v_radius_start, tmp010);
	let tmp681: f32 = (tmp659 * tmp682);
	let tmp679: f32 = (tmp678.v_value - tmp669);
	let tmp574: vec3<f32> = (tmp603 + tmp573);
	let tmp650: f32 = mix(c_zero.v_value, c_one.v_value, tmp701);
	let tmp249: f32 = (tmp247 * tmp247);
	let tmp218: f32 = (tmp215 * tmp217);
	let tmp284: f32 = length(tmp286);
	let tmp229: f32 = (tmp228 * c_eyes_params.v_inside_smooth);
	let tmp738: f32 = mix(tmp739, tmp732, tmp737);
	let tmp231: f32 = (tmp230.v_value * tmp230.v_value);
	let tmp667: f32 = mix(tmp681, tmp679, tmp666);
	let tmp558: t_half = c_half;
	let tmp652: t_one = c_one;
	let tmp535: f32 = min(tmp509, tmp495);
	let tmp750: f32 = (tmp751 - tmp009);
	let tmp263: vec3<f32> = vec3<f32>(tmp262, tmp261.y, tmp261.z);
	let tmp546: t_one = c_one;
	let tmp540: f32 = (tmp537 * tmp539);
	let tmp624: f32 = mix(tmp602.v_size, tmp619.v_emotion_size, (((tmp650 * mix(c_one.v_value, c_zero.v_value, tmp738)) * mix(c_one.v_value, c_zero.v_value, tmp738)) * c_one.v_value));
	let tmp236: f32 = opp(tmp197);
	let tmp199: f32 = (tmp014 + tmp200.v_value);
	let tmp213: f32 = min(tmp191, tmp176);
	let tmp204: t_one = c_one;
	let tmp722: t_zero = c_zero;
	let tmp721: t_one = c_one;
	let tmp556: f32 = (tmp554 * tmp554);
	let tmp719: f32 = (tmp650 * mix(tmp721.v_value, tmp722.v_value, tmp738));
	let tmp572: vec3<f32> = (tmp574 + tmp566.v_o1);
	let tmp270: f32 = max(tmp269, tmp271.v_value);
	let tmp251: t_half = c_half;
	let tmp637: t_arms_params = u_arms_params;
	let tmp651: t_zero = c_zero;
	let tmp627: t_anm_sad = u_anm_sad;
	let tmp525: f32 = (tmp524 + tmp522);
	let tmp205: f32 = (tmp750 * tmp204.v_value);
	let tmp632: f32 = mix(tmp624, tmp627.v_emo_size, ((mix(tmp651.v_value, tmp652.v_value, tmp667) * mix(tmp721.v_value, tmp722.v_value, tmp738)) * c_one.v_value));
	let tmp557: f32 = (tmp556 * c_eyes_params.v_smoothing);
	let tmp232: f32 = (tmp229 * tmp231);
	let tmp234: f32 = max(tmp199, tmp236);
	let tmp559: f32 = (tmp558.v_value * tmp558.v_value);
	let tmp238: vec3<f32> = (tmp263 - tmp572);
	let tmp720: f32 = mix(tmp721.v_value, tmp722.v_value, tmp738);
	let tmp665: f32 = mix(tmp651.v_value, tmp652.v_value, tmp667);
	let tmp219: f32 = (tmp213 - tmp218);
	let tmp250: f32 = (tmp249 * tmp637.v_smooth);
	let tmp252: f32 = (tmp251.v_value * tmp251.v_value);
	let tmp541: f32 = (tmp535 - tmp540);
	let tmp547: f32 = (tmp525 * tmp546.v_value);
	let tmp748: f32 = (tmp719 * tmp720);
	let tmp288: t_zero = c_zero;
	let tmp272: f32 = (tmp270 / c_eyes_params.v_smoothing);
	let tmp285: f32 = (tmp284 - (tmp632 * c_eyes_params.v_inside_ratio));
	let tmp287: f32 = (tmp285 + tmp288.v_value);
	let tmp571: t_eyes_params = c_eyes_params;
	let tmp555: f32 = min(tmp541, tmp547);
	let tmp235: f32 = (tmp234 + tmp232);
	let tmp274: f32 = (tmp272 * tmp272);
	let tmp653: f32 = (tmp748 * c_one.v_value);
	let tmp259: t_one = c_one;
	let tmp654: t_one = c_one;
	let tmp248: f32 = min(tmp219, tmp205);
	let tmp747: f32 = (tmp665 * tmp720);
	let tmp253: f32 = (tmp250 * tmp252);
	let tmp582: f32 = (tmp632 * tmp571.v_inside_ratio);
	let tmp002: f32 = length(tmp238);
	let tmp560: f32 = (tmp557 * tmp559);
	let tmp292: t_one = c_one;
	let tmp276: t_half = c_half;
	let tmp620: vec3<f32> = vec3<f32>(tmp653, tmp653, tmp653);
	let tmp277: f32 = (tmp276.v_value * tmp276.v_value);
	let tmp260: f32 = (tmp235 * tmp259.v_value);
	let tmp709: f32 = (tmp747 * tmp654.v_value);
	let tmp275: f32 = (tmp274 * tmp571.v_smoothing);
	let tmp254: f32 = (tmp248 - tmp253);
	let tmp240: t_zero = c_zero;
	let tmp293: f32 = (tmp287 * tmp292.v_value);
	let tmp561: f32 = (tmp555 - tmp560);
	let tmp003: f32 = (tmp002 - tmp582);
	let tmp239: f32 = (tmp003 + tmp240.v_value);
	let tmp278: f32 = (tmp275 * tmp277);
	let tmp606: f32 = (tmp293 - tmp561);
	let tmp618: vec3<f32> = mix(u_material.v_color_body_1, u_material.v_color_body_angry, tmp620);
	let tmp273: f32 = min(tmp254, tmp260);
	let tmp264: t_one = c_one;
	let tmp629: vec3<f32> = vec3<f32>(tmp709, tmp709, tmp709);
	let tmp607: f32 = ceil(tmp606);
	let tmp630: vec3<f32> = mix(tmp618, u_material.v_color_body_sad, tmp629);
	let tmp598: vec3<f32> = vec3<f32>(tmp607, tmp607, tmp607);
	let tmp599: t_material = u_material;
	let tmp265: f32 = (tmp239 * tmp264.v_value);
	let tmp279: f32 = (tmp273 - tmp278);
	let tmp597: vec3<f32> = mix(tmp599.v_color_eyes, tmp630, tmp598);
	let tmp283: f32 = min(tmp279, tmp265);
	let tmp623: f32 = mix(tmp599.v_roughness_eyes, tmp599.v_roughness_body, tmp607);
	return t_outlet(tmp283, tmp597, tmp623);
}

